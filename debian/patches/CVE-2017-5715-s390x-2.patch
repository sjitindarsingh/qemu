From 068c92ebd09ce505ba1785da706e557f1294156a Mon Sep 17 00:00:00 2001
From: Christian Borntraeger <borntraeger@de.ibm.com>
Date: Fri, 12 Jan 2018 17:34:47 +0100
Subject: [PATCH v3 2/3] s390x/kvm: Handle bpb feature

We need to handle the bpb control on reset. Normally
stfle.82 is transparent (and the normal guest part works without
hypervisor activity), but we need to handle it on reset
to properly allow an admin to use nobp=0 after reboot.
As we have no CPU model we do not migrate the state. This is
ok as the guest kernel will update the flags really quick when
the feature is in use.

Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
---
 target-s390x/cpu.c |    1 +
 target-s390x/cpu.h |    1 +
 target-s390x/kvm.c |    9 +++++++++
 3 files changed, 11 insertions(+)

Index: qemu-2.5+dfsg/target-s390x/cpu.c
===================================================================
--- qemu-2.5+dfsg.orig/target-s390x/cpu.c	2018-01-30 10:23:00.161551819 -0500
+++ qemu-2.5+dfsg/target-s390x/cpu.c	2018-01-30 10:23:00.145551800 -0500
@@ -95,6 +95,7 @@ static void s390_cpu_reset(CPUState *s)
     CPUS390XState *env = &cpu->env;
 
     env->pfault_token = -1UL;
+    env->bpbc = false;
     scc->parent_reset(s);
     cpu->env.sigp_order = 0;
     s390_cpu_set_state(CPU_STATE_STOPPED, cpu);
Index: qemu-2.5+dfsg/target-s390x/cpu.h
===================================================================
--- qemu-2.5+dfsg.orig/target-s390x/cpu.h	2018-01-30 10:23:00.161551819 -0500
+++ qemu-2.5+dfsg/target-s390x/cpu.h	2018-01-30 10:23:00.145551800 -0500
@@ -90,6 +90,7 @@ typedef struct CPUS390XState {
 
     uint32_t fpc;          /* floating-point control register */
     uint32_t cc_op;
+    bool bpbc;             /* branch prediction blocking */
 
     float_status fpu_status; /* passed to softfloat lib */
 
Index: qemu-2.5+dfsg/target-s390x/kvm.c
===================================================================
--- qemu-2.5+dfsg.orig/target-s390x/kvm.c	2018-01-30 10:23:00.161551819 -0500
+++ qemu-2.5+dfsg/target-s390x/kvm.c	2018-01-30 10:23:00.145551800 -0500
@@ -420,6 +420,11 @@ int kvm_arch_put_registers(CPUState *cs,
         }
     }
 
+    if (can_sync_regs(cs, KVM_SYNC_BPBC)) {
+        cs->kvm_run->s.regs.bpbc = env->bpbc;
+        cs->kvm_run->kvm_dirty_regs |= KVM_SYNC_BPBC;
+    }
+
     /* Finally the prefix */
     if (can_sync_regs(cs, KVM_SYNC_PREFIX)) {
         cs->kvm_run->s.regs.prefix = env->psa;
@@ -517,6 +522,10 @@ int kvm_arch_get_registers(CPUState *cs)
         kvm_get_one_reg(cs, KVM_REG_S390_PP, &env->pp);
     }
 
+    if (can_sync_regs(cs, KVM_SYNC_BPBC)) {
+        env->bpbc = cs->kvm_run->s.regs.bpbc;
+    }
+
     /* pfault parameters */
     if (can_sync_regs(cs, KVM_SYNC_PFAULT)) {
         env->pfault_token = cs->kvm_run->s.regs.pft;
