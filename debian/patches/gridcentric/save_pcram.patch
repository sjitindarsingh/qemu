# HG changeset patch
# Parent 368b8250b4887365f650b19b5fd2c05ff314657d
Control saving of mmap-ed memory via an optional boolean qmp/hmp flag.

The flag is savevm (-s). It's a boolean defaulting to true. Even if a memory
region has do_not_save set (because it is an mmap of some file via the --pcram
option), if this flag is set then the region will be saved. The flag is set via
qmp/hmp only for the migrate command. So effectively, mmap-ed --pcram regions
will not be saved only if the flag is explicitly encoded in the json qmp
request.

Signed-off-by: Andres Lagar-Cavilla <andres@lagarcavilla.org>

Index: qemu/arch_init.c
===================================================================
--- qemu.orig/arch_init.c	2013-01-17 10:57:04.352404758 -0600
+++ qemu/arch_init.c	2013-01-17 10:57:04.336404757 -0600
@@ -345,7 +345,7 @@
 
     ret = test_and_clear_bit(nr, migration_bitmap);
 
-    if (ret && !block->do_not_save) {
+    if (ret && !block->will_not_save) {
         migration_dirty_pages--;
     }
     return ret;
@@ -360,7 +360,7 @@
 
     ret = test_and_set_bit(nr, migration_bitmap);
 
-    if (!ret && !block->do_not_save) {
+    if (!ret && !block->will_not_save) {
         migration_dirty_pages++;
     }
     return ret;
@@ -427,7 +427,7 @@
     if (!block)
         block = QLIST_FIRST(&ram_list.blocks);
     
-    while (block->do_not_save) {
+    while (block->will_not_save) {
         block = QLIST_NEXT(block, next);
         if (!block) {
             return 0;
@@ -476,12 +476,12 @@
             block = QLIST_NEXT(block, next);
             if (!block)
                 block = QLIST_FIRST(&ram_list.blocks);
-            /* We need to skip pcram if do_not_save, otherwise we'll loop all
+            /* We need to skip pcram if will_not_save, otherwise we'll loop all
              * over again. */
-            while (block->do_not_save) {
+            while (block->will_not_save) {
                 block = QLIST_NEXT(block, next);
                 /* This will not iterate forever because we only set pcram to
-                 * do_not_save, and there are at least one other
+                 * will_not_save, and there are at least one other
                  * ramblock(e.g. pc.rom or pc.bios). */
                 if (!block)
                     block = QLIST_FIRST(&ram_list.blocks);
@@ -552,6 +552,16 @@
     g_free(blocks);
 }
 
+void tag_ram_blocks(int saveram)
+{
+    RAMBlock *block = QLIST_FIRST(&ram_list.blocks);
+    while (block) {
+        if (block->do_not_save)
+            block->will_not_save = !saveram;
+        block = QLIST_NEXT(block, next);
+    }
+}
+
 static void migration_end(void)
 {
     memory_global_dirty_log_stop();
@@ -592,7 +602,7 @@
     {
         RAMBlock *block = QLIST_FIRST(&ram_list.blocks);
         while (block) {
-            if (block->do_not_save)
+            if (block->will_not_save)
                 migration_dirty_pages -= block->length >> TARGET_PAGE_BITS;
             block = QLIST_NEXT(block, next);
         }
Index: qemu/arch_init.h
===================================================================
--- qemu.orig/arch_init.h	2013-01-17 10:57:04.352404758 -0600
+++ qemu/arch_init.h	2013-01-17 10:57:04.340404758 -0600
@@ -33,6 +33,7 @@
 int tcg_available(void);
 int kvm_available(void);
 int xen_available(void);
+extern void tag_ram_blocks(int saveram);
 
 CpuDefinitionInfoList *arch_query_cpu_definitions(Error **errp);
 
Index: qemu/cpu-all.h
===================================================================
--- qemu.orig/cpu-all.h	2013-01-17 10:57:04.352404758 -0600
+++ qemu/cpu-all.h	2013-01-17 10:57:04.340404758 -0600
@@ -489,6 +489,7 @@
     char idstr[256];
     QLIST_ENTRY(RAMBlock) next;
     int do_not_save;
+    int will_not_save;
 #if defined(__linux__) && !defined(TARGET_S390X)
     int fd;
 #endif
Index: qemu/exec.c
===================================================================
--- qemu.orig/exec.c	2013-01-17 10:57:04.352404758 -0600
+++ qemu/exec.c	2013-01-17 10:57:04.340404758 -0600
@@ -2389,6 +2389,7 @@
             abort();
         }
         block->do_not_save = 1;
+        block->will_not_save = 1;
         return host;
     }
     return NULL;
Index: qemu/hmp-commands.hx
===================================================================
--- qemu.orig/hmp-commands.hx	2013-01-17 10:57:04.352404758 -0600
+++ qemu/hmp-commands.hx	2013-01-17 10:57:04.344404758 -0600
@@ -841,13 +841,15 @@
 
     {
         .name       = "migrate",
-        .args_type  = "detach:-d,blk:-b,inc:-i,uri:s",
-        .params     = "[-d] [-b] [-i] uri",
+        .args_type  = "detach:-d,blk:-b,inc:-i,saveram:-s,uri:s",
+        .params     = "[-d] [-b] [-i] [-s] uri",
         .help       = "migrate to URI (using -d to not wait for completion)"
 		      "\n\t\t\t -b for migration without shared storage with"
 		      " full copy of disk\n\t\t\t -i for migration without "
 		      "shared storage with incremental copy of disk "
-		      "(base image shared between src and destination)",
+		      "(base image shared between src and destination)"
+		      "\n\t\t\t -s to save ram regions even if they are"
+		      "mmaps via --pcram (default true)",
         .mhandler.cmd = hmp_migrate,
     },
 
Index: qemu/hmp.c
===================================================================
--- qemu.orig/hmp.c	2013-01-17 10:57:04.352404758 -0600
+++ qemu/hmp.c	2013-01-17 10:57:04.344404758 -0600
@@ -1073,11 +1073,12 @@
 {
     int detach = qdict_get_try_bool(qdict, "detach", 0);
     int blk = qdict_get_try_bool(qdict, "blk", 0);
+    int saveram = qdict_get_try_bool(qdict, "saveram", 1);
     int inc = qdict_get_try_bool(qdict, "inc", 0);
     const char *uri = qdict_get_str(qdict, "uri");
     Error *err = NULL;
 
-    qmp_migrate(uri, !!blk, blk, !!inc, inc, false, false, &err);
+    qmp_migrate(uri, !!blk, blk, !!saveram, saveram, !!inc, inc, false, false, &err);
     if (err) {
         monitor_printf(mon, "migrate: %s\n", error_get_pretty(err));
         error_free(err);
Index: qemu/migration.c
===================================================================
--- qemu.orig/migration.c	2013-01-17 10:57:04.352404758 -0600
+++ qemu/migration.c	2013-01-17 10:57:04.344404758 -0600
@@ -22,6 +22,7 @@
 #include "qemu_socket.h"
 #include "block-migration.h"
 #include "qmp-commands.h"
+#include "arch_init.h"
 
 //#define DEBUG_MIGRATION
 
@@ -497,6 +498,7 @@
 }
 
 void qmp_migrate(const char *uri, bool has_blk, bool blk,
+                 bool has_saveram, bool saveram,
                  bool has_inc, bool inc, bool has_detach, bool detach,
                  Error **errp)
 {
@@ -524,6 +526,11 @@
 
     s = migrate_init(&params);
 
+    /* Now tag whether ram blocks should not really be saved */
+#if defined(__linux__)
+    tag_ram_blocks(saveram);
+#endif
+
     if (strstart(uri, "tcp:", &p)) {
         tcp_start_outgoing_migration(s, p, &local_err);
 #if !defined(WIN32)
Index: qemu/qapi-schema.json
===================================================================
--- qemu.orig/qapi-schema.json	2013-01-17 10:57:04.352404758 -0600
+++ qemu/qapi-schema.json	2013-01-17 10:57:04.344404758 -0600
@@ -2211,7 +2211,7 @@
 # Since: 0.14.0
 ##
 { 'command': 'migrate',
-  'data': {'uri': 'str', '*blk': 'bool', '*inc': 'bool', '*detach': 'bool' } }
+  'data': {'uri': 'str', '*blk': 'bool', '*saveram': 'bool', '*inc': 'bool', '*detach': 'bool' } }
 
 # @xen-save-devices-state:
 #
Index: qemu/qmp-commands.hx
===================================================================
--- qemu.orig/qmp-commands.hx	2013-01-17 10:57:04.352404758 -0600
+++ qemu/qmp-commands.hx	2013-01-17 10:57:04.348404758 -0600
@@ -518,7 +518,7 @@
 
     {
         .name       = "migrate",
-        .args_type  = "detach:-d,blk:-b,inc:-i,uri:s",
+        .args_type  = "detach:-d,blk:-b,inc:-i,saveram:-s,uri:s",
         .mhandler.cmd_new = qmp_marshal_input_migrate,
     },
 
@@ -532,6 +532,7 @@
 
 - "blk": block migration, full disk copy (json-bool, optional)
 - "inc": incremental disk copy (json-bool, optional)
+- "saveram": Save RAM even if it's a file mmap via --pcram (json-bool, optional)
 - "uri": Destination URI (json-string)
 
 Example:
@@ -543,7 +544,7 @@
 
 (1) The 'query-migrate' command should be used to check migration's progress
     and final result (this information is provided by the 'status' member)
-(2) All boolean arguments default to false
+(2) detach, blk and inc boolean arguments default to false. Saveram default to true
 (3) The user Monitor's "detach" argument is invalid in QMP and should not
     be used
 
