From 2c630e3618aa5abfa37a79683e02a5db46769f38 Mon Sep 17 00:00:00 2001
From: Peter Maydell <peter.maydell@linaro.org>
Date: Mon, 18 Feb 2013 16:58:24 +0000
Subject: [PATCH 07/71] hw/omap_dma.c: Support more than 64 channels of DMA
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Support more than 64 channels of DMA by converting the drqbmp
bitmap into a simple array.

TODO: use bitmap.h instead??

Signed-off-by: Juha Riihim√§ki <juha.riihimaki@nokia.com>
[Riku Voipio: Fixes and restructuring patchset]
Signed-off-by: Riku Voipio <riku.voipio@iki.fi>
[Peter Maydell: More fixes and cleanups for upstream submission]
Signed-off-by:  Peter Maydell <peter.maydell@linaro.org>
---
 hw/dma/omap_dma.c        | 16 +++++++++-------
 hw/dma/soc_dma.c         |  2 +-
 include/hw/arm/soc_dma.h |  4 +++-
 3 files changed, 13 insertions(+), 9 deletions(-)

diff --git a/hw/dma/omap_dma.c b/hw/dma/omap_dma.c
index 0e8cccd..34d1824 100644
--- a/hw/dma/omap_dma.c
+++ b/hw/dma/omap_dma.c
@@ -248,8 +248,9 @@ static void omap_dma_deactivate_channel(struct omap_dma_s *s,
 
     /* Don't deactive the channel if it is synchronized and the DMA request is
        active */
-    if (ch->sync && ch->enable && (s->dma->drqbmp & (1ULL << ch->sync)))
+    if (ch->sync && ch->enable && s->dma->drqst[ch->sync]) {
         return;
+    }
 
     if (ch->active) {
         ch->active = 0;
@@ -266,9 +267,9 @@ static void omap_dma_enable_channel(struct omap_dma_s *s,
         ch->waiting_end_prog = 0;
         omap_dma_channel_load(ch);
         /* TODO: theoretically if ch->sync && ch->prefetch &&
-         * !s->dma->drqbmp[ch->sync], we should also activate and fetch
+         * !s->dma->drqst[ch->sync], we should also activate and fetch
          * from source and then stall until signalled.  */
-        if ((!ch->sync) || (s->dma->drqbmp & (1ULL << ch->sync))) {
+        if ((!ch->sync) || s->dma->drqst[ch->sync]) {
             omap_dma_activate_channel(s, ch);
         }
     }
@@ -1552,12 +1553,13 @@ static void omap_dma_request(void *opaque, int drq, int req)
     struct omap_dma_s *s = (struct omap_dma_s *) opaque;
     /* The request pins are level triggered in QEMU.  */
     if (req) {
-        if (~s->dma->drqbmp & (1ULL << drq)) {
-            s->dma->drqbmp |= 1ULL << drq;
+        if (!s->dma->drqst[drq]) {
+            s->dma->drqst[drq] = 1;
             omap_dma_process_request(s, drq);
         }
-    } else
-        s->dma->drqbmp &= ~(1ULL << drq);
+    } else {
+        s->dma->drqst[drq] = 0;
+    }
 }
 
 /* XXX: this won't be needed once soc_dma knows about clocks.  */
diff --git a/hw/dma/soc_dma.c b/hw/dma/soc_dma.c
index 5e3491d..3ff628f 100644
--- a/hw/dma/soc_dma.c
+++ b/hw/dma/soc_dma.c
@@ -229,7 +229,7 @@ void soc_dma_reset(struct soc_dma_s *soc)
 {
     struct dma_s *s = (struct dma_s *) soc;
 
-    s->soc.drqbmp = 0;
+    memset(s->soc.drqst, 0, sizeof(s->soc.drqst));
     s->ch_enable_mask = 0;
     s->enabled_count = 0;
     soc_dma_ch_freq_update(s);
diff --git a/include/hw/arm/soc_dma.h b/include/hw/arm/soc_dma.h
index 7379731..94f1055 100644
--- a/include/hw/arm/soc_dma.h
+++ b/include/hw/arm/soc_dma.h
@@ -25,6 +25,8 @@
 #include "exec/memory.h"
 #include "hw/irq.h"
 
+#define DMA_MAX_DRQ 96
+
 struct soc_dma_s;
 struct soc_dma_ch_s;
 typedef void (*soc_dma_io_t)(void *opaque, uint8_t *buf, int len);
@@ -72,7 +74,7 @@ struct soc_dma_ch_s {
 struct soc_dma_s {
     /* Following fields are set by the SoC DMA module and can be used
      * by anybody.  */
-    uint64_t drqbmp;	/* Is zeroed by soc_dma_reset() */
+    uint8_t drqst[DMA_MAX_DRQ]; /* Is zeroed by soc_dma_reset() */
     qemu_irq *drq;
     void *opaque;
     int64_t freq;
-- 
1.8.3.2

