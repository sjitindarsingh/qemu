From 56674d9155f939b950f5f7813cc3ede205560aad Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Juha=20Riihim=C3=A4ki?= <juha.riihimaki@nokia.com>
Date: Mon, 18 Feb 2013 16:58:24 +0000
Subject: [PATCH 08/70] omap_dma: add scatter gather list support
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Juha Riihim√§ki <juha.riihimaki@nokia.com>
---
 hw/dma/omap_dma.c | 411 +++++++++++++++++++++++++++++++++++-------------------
 1 file changed, 268 insertions(+), 143 deletions(-)

diff --git a/hw/dma/omap_dma.c b/hw/dma/omap_dma.c
index 7d365bb..c3971a7 100644
--- a/hw/dma/omap_dma.c
+++ b/hw/dma/omap_dma.c
@@ -98,6 +98,12 @@ struct omap_dma_channel_s {
     int type;
     int suspend;
     int buf_disable;
+
+    struct omap_dma_desc_linked_list_s {
+        uint32_t ptr;
+        uint32_t next;
+        uint32_t number;
+    } sgl;
 };
 
 struct omap_dma_s {
@@ -132,7 +138,10 @@ struct omap_dma_s {
 #define SYNC            (1 << 6)
 #define END_PKT_INTR	(1 << 7)
 #define TRANS_ERR_INTR	(1 << 8)
+#define SV_ERR_INTR     (1 << 10)
 #define MISALIGN_INTR	(1 << 11)
+#define END_DRAIN_INTR  (1 << 12)
+#define END_SBLOCK_INTR (1 << 14)
 
 static inline void omap_dma_interrupts_update(struct omap_dma_s *s)
 {
@@ -259,6 +268,100 @@ static void omap_dma_deactivate_channel(struct omap_dma_s *s,
     }
 }
 
+static void omap_dma4_write_ch(struct omap_dma_s *s,
+                               struct omap_dma_channel_s *ch,
+                               uint32_t offset, uint32_t value);
+
+static int omap_dma_sgl_next(struct omap_dma_s *s,
+                             struct omap_dma_channel_s *ch)
+{
+    if ((ch->sgl.next >> 2) == 0x3fffffff) {
+        ch->status |= END_SBLOCK_INTR;
+        return 0;
+    }
+    int type = (ch->sgl.ptr >> 4) & 7;      /* NEXT_DESCRIPTOR_TYPE */
+    int src_valid = (ch->sgl.ptr >> 2) & 3; /* SRC_VALID */
+    int dst_valid = ch->sgl.ptr & 3;        /* DEST_VALID */
+    if (type < 1 || type > 3) {
+        hw_error("%s: unknown descriptor type %d\n", __func__, type);
+    }
+    hwaddr addr = (hwaddr)ch->sgl.next;
+    ch->sgl.ptr &= ~0xff;
+    uint8_t data[4];
+    cpu_physical_memory_read(addr, data, 4);
+    uint32_t word = ldl_p(data);
+    ch->sgl.next = word & ~3;
+    ch->sgl.ptr |= (word & 1) << 7;     /* PAUSE_LINK_LIST */
+    cpu_physical_memory_read(addr + 4, data, 4);
+    word = ldl_p(data);
+    ch->sgl.ptr |= (word >> 25) & 0x70; /* NEXT_DESCRIPTOR_TYPE */
+    ch->sgl.ptr |= (word >> 26) & 3;    /* DEST_VALID */
+    ch->sgl.ptr |= (word >> 22) & 0x0c; /* SRC_VALID */
+    ch->sgl.number = word & 0xffffff;
+    if (type == 3) {
+        ch->interrupts &= ~0x20;               /* BLOCK_IE */
+        ch->interrupts |= (word >> 23) & 0x20; /* BLOCK_IE */
+    }
+    addr += 8;
+    switch (src_valid) {
+    case 0:
+        ch->addr[0] = ch->active_set.src;
+        break;
+    case 1:
+        cpu_physical_memory_read(addr, data, 4);
+        ch->addr[0] = ldl_p(data);
+        addr += 4;
+        break;
+    case 2:
+        break;
+    default:
+        hw_error("%s: unknown src addressing mode %d\n",
+                 __func__, src_valid);
+        break;
+    }
+    switch (dst_valid) {
+    case 0:
+        ch->addr[1] = ch->active_set.dest;
+        break;
+    case 1:
+        cpu_physical_memory_read(addr, data, 4);
+        ch->addr[1] = ldl_p(data);
+        addr += 4;
+        break;
+    case 2:
+        break;
+    default:
+        hw_error("%s: unknown dest addressing mode %d\n",
+                 __func__, dst_valid);
+        break;
+    }
+    if (type == 1 || type == 2) {
+        cpu_physical_memory_read(addr, data, 4);
+        word = ldl_p(data);
+        ch->interrupts = word >> 16;
+        ch->frames = word & 0xffff;
+        cpu_physical_memory_read(addr + 4, data, 4);
+        word = ldl_p(data);
+        ch->element_index[0] = (int16_t)(word >> 16);
+        ch->element_index[1] = (int16_t)(word & 0xffff);
+        cpu_physical_memory_read(addr + 8, data, 4);
+        ch->frame_index[1] = ldl_p(data);
+        cpu_physical_memory_read(addr + 12, data, 4);
+        ch->frame_index[0] = ldl_p(data);
+        if (type == 1) {
+            cpu_physical_memory_read(addr + 16, data, 4);
+            ch->color = ldl_p(data);
+            cpu_physical_memory_read(addr + 20, data, 4);
+            omap_dma4_write_ch(s, ch, 0x10, ldl_p(data)); /* CSDP */
+            cpu_physical_memory_read(addr + 24, data, 4);
+            omap_dma4_write_ch(s, ch, 0x04, ldl_p(data)); /* CLNK_CTRL */
+            cpu_physical_memory_read(addr + 28, data, 4);
+            omap_dma4_write_ch(s, ch, 0x00, ldl_p(data)); /* CCR */
+        }
+    }
+    return 1;
+}
+
 static void omap_dma_enable_channel(struct omap_dma_s *s,
                 struct omap_dma_channel_s *ch)
 {
@@ -366,6 +469,34 @@ static void omap_dma_process_request(struct omap_dma_s *s, int request)
         omap_dma_interrupts_update(s);
 }
 
+static void omap_dma_end_of_block(struct omap_dma_s *s,
+                                  struct omap_dma_channel_s *ch)
+{
+    if (ch->omap_3_1_compatible_disable) {
+        omap_dma_disable_channel(s, ch);
+        if (ch->link_enabled) {
+            omap_dma_enable_channel(s, &s->ch[ch->link_next_ch]);
+        }
+    } else {
+        int sgl_pause = (ch->sgl.ptr >> 7) & 1; /* PAUSE_LINK_LIST */
+        if (((ch->sgl.ptr >> 8) & 3) != 1 || /* TRANSFER_MODE != linked list */
+            !omap_dma_sgl_next(s, ch) ||     /* end of list */
+            sgl_pause) {
+            if (!ch->auto_init) {
+                omap_dma_disable_channel(s, ch);
+            } else if (ch->repeat || ch->end_prog) {
+                omap_dma_channel_load(ch);
+            } else {
+                ch->waiting_end_prog = 1;
+                omap_dma_deactivate_channel(s, ch);
+            }
+        }
+    }
+
+    if (ch->interrupts & END_BLOCK_INTR)
+        ch->status |= END_BLOCK_INTR;
+}
+
 static void omap_dma_transfer_generic(struct soc_dma_ch_s *dma)
 {
     uint8_t value[4];
@@ -458,25 +589,7 @@ static void omap_dma_transfer_generic(struct soc_dma_ch_s *dma)
             if (a->frame == a->frames) {
                 /* End of Block */
                 /* Disable the channel */
-
-                if (ch->omap_3_1_compatible_disable) {
-                    omap_dma_disable_channel(s, ch);
-                    if (ch->link_enabled)
-                        omap_dma_enable_channel(s,
-                                        &s->ch[ch->link_next_ch]);
-                } else {
-                    if (!ch->auto_init)
-                        omap_dma_disable_channel(s, ch);
-                    else if (ch->repeat || ch->end_prog)
-                        omap_dma_channel_load(ch);
-                    else {
-                        ch->waiting_end_prog = 1;
-                        omap_dma_deactivate_channel(s, ch);
-                    }
-                }
-
-                if (ch->interrupts & END_BLOCK_INTR)
-                    ch->status |= END_BLOCK_INTR;
+                omap_dma_end_of_block(s, ch);
             }
         }
     } while (status == ch->status && ch->active);
@@ -507,6 +620,11 @@ static void omap_dma_transfer_setup(struct soc_dma_ch_s *dma)
 
     a = &ch->active_set;
 
+    if (((ch->sgl.ptr >> 8) & 3) == 1 && /* TRANSFER_MODE == linked list */
+        a->frame >= a->frames) {
+        omap_dma_channel_load(ch);
+    }
+
     src_p = &s->mpu->port[ch->port[0]];
     dest_p = &s->mpu->port[ch->port[1]];
     if ((!ch->constant_fill && !src_p->addr_valid(s->mpu, a->src)) ||
@@ -626,24 +744,7 @@ static void omap_dma_transfer_setup(struct soc_dma_ch_s *dma)
         if (min_elems == elements[omap_dma_intr_block]) {
             /* End of Block */
             /* Disable the channel */
-
-            if (ch->omap_3_1_compatible_disable) {
-                omap_dma_disable_channel(s, ch);
-                if (ch->link_enabled)
-                    omap_dma_enable_channel(s, &s->ch[ch->link_next_ch]);
-            } else {
-                if (!ch->auto_init)
-                    omap_dma_disable_channel(s, ch);
-                else if (ch->repeat || ch->end_prog)
-                    omap_dma_channel_load(ch);
-                else {
-                    ch->waiting_end_prog = 1;
-                    omap_dma_deactivate_channel(s, ch);
-                }
-            }
-
-            if (ch->interrupts & END_BLOCK_INTR)
-                ch->status |= END_BLOCK_INTR;
+            omap_dma_end_of_block(s, ch);
         }
 
         /* Update packet number */
@@ -747,6 +848,9 @@ void omap_dma_reset(struct soc_dma_s *dma)
         s->ch[i].priority = 0;
         s->ch[i].interleave_disabled = 0;
         s->ch[i].type = 0;
+        s->ch[i].sgl.ptr = 0;
+        s->ch[i].sgl.next = 0xfffffffc;
+        s->ch[i].sgl.number = 0;
     }
 }
 
@@ -1531,6 +1635,7 @@ static void omap_dma_write(void *opaque, hwaddr addr,
     case 0x404 ... 0x4fe:
         if (s->model <= omap_dma_3_1)
             break;
+        /* fall through */
     case 0x400:
         /* Fall through. */
         if (omap_dma_sys_write(s, addr, value))
@@ -1699,9 +1804,9 @@ static void omap_dma_interrupts_4_update(struct omap_dma_s *s)
     uint32_t bmp, bit;
 
     for (bmp = 0, bit = 1; bit; ch ++, bit <<= 1)
-        if ((ch->status &= ch->interrupts)) {
+        if ((ch->status & ch->interrupts)) {
             bmp |= bit;
-            ch->cstatus |= ch->status;
+            ch->cstatus |= ch->status & ch->interrupts;
             ch->status = 0;
         }
     if ((s->irqstat[0] |= s->irqen[0] & bmp))
@@ -1868,96 +1973,36 @@ static uint64_t omap_dma4_read(void *opaque, hwaddr addr,
         return ch->color;
 
     case 0x50: /* DMA4_CDP */
-    case 0x54: /* DMA4_CNDP */
-    case 0x58: /* DMA4_CCDN */
-        return 0;
-
-    default:
-        OMAP_BAD_REG(0x80 + chnum * 0x60 + addr);
-        return 0;
-    }
-}
-
-static void omap_dma4_write(void *opaque, hwaddr addr,
-                            uint64_t value, unsigned size)
-{
-    struct omap_dma_s *s = (struct omap_dma_s *) opaque;
-    int chnum, irqn = 0;
-    struct omap_dma_channel_s *ch;
-
-    if (size == 1) {
-        return omap_badwidth_write16(opaque, addr, value);
-    }
-
-    switch (addr) {
-    case 0x14:	/* DMA4_IRQSTATUS_L3 */
-        irqn ++;
-        /* fall through */
-    case 0x10:	/* DMA4_IRQSTATUS_L2 */
-        irqn ++;
-        /* fall through */
-    case 0x0c:	/* DMA4_IRQSTATUS_L1 */
-        irqn ++;
-        /* fall through */
-    case 0x08:	/* DMA4_IRQSTATUS_L0 */
-        s->irqstat[irqn] &= ~value;
-        if (!s->irqstat[irqn])
-            qemu_irq_lower(s->irq[irqn]);
-        return;
-
-    case 0x24:	/* DMA4_IRQENABLE_L3 */
-        irqn ++;
-        /* fall through */
-    case 0x20:	/* DMA4_IRQENABLE_L2 */
-        irqn ++;
-        /* fall through */
-    case 0x1c:	/* DMA4_IRQENABLE_L1 */
-        irqn ++;
-        /* fall through */
-    case 0x18:	/* DMA4_IRQENABLE_L0 */
-        s->irqen[irqn] = value;
-        return;
-
-    case 0x2c:	/* DMA4_OCP_SYSCONFIG */
-        if (value & 2) { /* SOFTRESET */
-            if (!cpu_is_omap3630(s->mpu)) { /* N/A on 3630GP */
-                omap_dma_reset(s->dma);
-            }
+        if (cpu_is_omap3630(s->mpu)) {
+            return ch->sgl.ptr;
         }
-        s->ocp = value & 0x3321;
-        if (((s->ocp >> 12) & 3) == 3)				/* MIDLEMODE */
-            fprintf(stderr, "%s: invalid DMA power mode\n", __FUNCTION__);
-        return;
-
-    case 0x78:	/* DMA4_GCR */
-        s->gcr = value & 0x00ff00ff;
-	if ((value & 0xff) == 0x00)		/* MAX_CHANNEL_FIFO_DEPTH */
-            fprintf(stderr, "%s: wrong FIFO depth in GCR\n", __FUNCTION__);
-        return;
+        break;
 
-    case 0x80 ... 0xfff:
-        addr -= 0x80;
-        chnum = addr / 0x60;
-        ch = s->ch + chnum;
-        addr -= chnum * 0x60;
+    case 0x54: /* DMA4_CNDP */
+        if (cpu_is_omap3630(s->mpu)) {
+            return ch->sgl.next;
+        }
         break;
 
-    case 0x00:	/* DMA4_REVISION */
-    case 0x28:	/* DMA4_SYSSTATUS */
-    case 0x64:	/* DMA4_CAPS_0 */
-    case 0x6c:	/* DMA4_CAPS_2 */
-    case 0x70:	/* DMA4_CAPS_3 */
-    case 0x74:	/* DMA4_CAPS_4 */
-        OMAP_RO_REG(addr);
-        return;
+    case 0x58: /* DMA4_CCDN */
+        if (cpu_is_omap3630(s->mpu)) {
+            return ch->sgl.number;
+        }
+        break;
 
     default:
-        OMAP_BAD_REG(addr);
-        return;
+        break;
     }
 
-    /* Per-channel registers */
-    switch (addr) {
+    OMAP_BAD_REG(0x80 + chnum * 0x60 + addr);
+    return 0;
+}
+
+static void omap_dma4_write_ch(struct omap_dma_s *s,
+                               struct omap_dma_channel_s *ch,
+                               uint32_t offset, uint32_t value)
+{
+    switch (offset) {
     case 0x00:	/* DMA4_CCR */
         ch->buf_disable = (value >> 25) & 1;
         ch->src_sync = (value >> 24) & 1;	/* XXX For CamDMA must be 1 */
@@ -1979,11 +2024,15 @@ static void omap_dma4_write(void *opaque, hwaddr addr,
         ch->sync = (value & 0x001f) | ((value >> 14) & 0x0060);
         /* XXX must be 0x01 for CamDMA */
 
-        if (value & 0x0080)
-            omap_dma_enable_channel(s, ch);
-        else
+        if (value & 0x0080) {
+            if (((ch->sgl.ptr >> 8) & 3) != 1 || /* TRANSFER_MODE */
+                !(ch->sgl.ptr & (1 << 10)) ||    /* FAST */
+                omap_dma_sgl_next(s, ch)) {
+                omap_dma_enable_channel(s, ch);
+            }
+        } else {
             omap_dma_disable_channel(s, ch);
-
+        }
         break;
 
     case 0x04:	/* DMA4_CLNK_CTRL */
@@ -2068,41 +2117,117 @@ static void omap_dma4_write(void *opaque, hwaddr addr,
         ch->set_update = 1;
         break;
 
-    case 0x44:	/* DMA4_COLOR */
-        /* XXX only in sDMA */
-        ch->color = value;
-        break;
-
     case 0x34:	/* DMA4_CSAC */
     case 0x38:	/* DMA4_CDAC */
     case 0x3c:	/* DMA4_CCEN */
     case 0x40:	/* DMA4_CCFN */
-        /* f.ex. linux kernel writes zeroes to these registers as well
-           when performing a DMA channel reset. let's just ignore the
-           writes instead of reporting "dummy" errors */
-        /*OMAP_RO_REG(0x80 + chnum * 0x60 + addr);*/
+        /* ignore */
+        break;
+
+    case 0x44: /* DMA4_COLOR */
+        /* XXX only in sDMA */
+        ch->color = value;
         break;
 
     case 0x50: /* DMA4_CDP */
         if (cpu_is_omap3630(s->mpu)) {
-            if ((value >> 8) & 3) { /* TRANSFER_MODE */
-                hw_error("%s: linked list transfer mode not supported",
-                         __FUNCTION__);
-            }
-        } else {
-            OMAP_BAD_REG(0x80 + chnum * 0x60 + addr);
+            ch->sgl.ptr = value & 0x7ff;
         }
         break;
 
     case 0x54: /* DMA4_CNDP */
+        if (cpu_is_omap3630(s->mpu)) {
+            ch->sgl.next = value & ~3;
+        }
+        break;
+
     case 0x58: /* DMA4_CCDN */
-        if (!cpu_is_omap3630(s->mpu)) {
-            OMAP_BAD_REG(0x80 + chnum * 0x60 + addr);
+        if (cpu_is_omap3630(s->mpu)) {
+            ch->sgl.number = value & 0xffff;
         }
         break;
 
     default:
-        OMAP_BAD_REG(0x80 + chnum * 0x60 + addr);
+        fprintf(stderr, "%s: unknown register 0x%x\n",
+                __func__, offset + 0x80);
+        break;
+    }
+}
+
+static void omap_dma4_write(void *opaque, hwaddr addr,
+                            uint64_t value, unsigned size)
+{
+    struct omap_dma_s *s = (struct omap_dma_s *) opaque;
+    int chnum, irqn = 0;
+
+    if (size == 1) {
+        return omap_badwidth_write16(opaque, addr, value);
+    }
+
+    switch (addr) {
+    case 0x14: /* DMA4_IRQSTATUS_L3 */
+        irqn++;
+        /* fall through */
+    case 0x10: /* DMA4_IRQSTATUS_L2 */
+        irqn++;
+        /* fall through */
+    case 0x0c: /* DMA4_IRQSTATUS_L1 */
+        irqn++;
+        /* fall through */
+    case 0x08: /* DMA4_IRQSTATUS_L0 */
+        s->irqstat[irqn] &= ~value;
+        if (!s->irqstat[irqn]) {
+            qemu_irq_lower(s->irq[irqn]);
+        }
+        break;
+
+    case 0x24: /* DMA4_IRQENABLE_L3 */
+        irqn++;
+    case 0x20: /* DMA4_IRQENABLE_L2 */
+        irqn++;
+    case 0x1c: /* DMA4_IRQENABLE_L1 */
+        irqn++;
+    case 0x18: /* DMA4_IRQENABLE_L0 */
+        s->irqen[irqn] = value;
+        break;
+
+    case 0x2c: /* DMA4_OCP_SYSCONFIG */
+        if (value & 2) { /* SOFTRESET */
+            /* N/A on 3630GP?? */
+            omap_dma_reset(s->dma);
+        }
+        s->ocp = value & 0x3321;
+        if (((s->ocp >> 12) & 3) == 3) { /* MIDLEMODE */
+            fprintf(stderr, "%s: invalid DMA power mode\n", __func__);
+        }
+        break;
+
+    case 0x78: /* DMA4_GCR */
+        s->gcr = value & 0x00ff00ff;
+        if ((value & 0xff) == 0x00) { /* MAX_CHANNEL_FIFO_DEPTH */
+            fprintf(stderr, "%s: wrong FIFO depth in GCR\n", __func__);
+        }
+        break;
+
+    case 0x80 ... 0xfff:
+        addr -= 0x80;
+        chnum = addr / 0x60;
+        addr -= chnum * 0x60;
+        omap_dma4_write_ch(s, s->ch + chnum, (uint32_t)addr, value);
+        break;
+
+    case 0x00: /* DMA4_REVISION */
+    case 0x28: /* DMA4_SYSSTATUS */
+    case 0x64: /* DMA4_CAPS_0 */
+    case 0x6c: /* DMA4_CAPS_2 */
+    case 0x70: /* DMA4_CAPS_3 */
+    case 0x74: /* DMA4_CAPS_4 */
+        OMAP_RO_REG(addr);
+        break;
+
+    default:
+        OMAP_BAD_REG(addr);
+        break;
     }
 }
 
-- 
1.8.5.2

