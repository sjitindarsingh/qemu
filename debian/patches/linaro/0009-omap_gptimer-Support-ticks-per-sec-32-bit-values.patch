From 587ad3a465f3c7bb394d968a3495ae2aa8a28d01 Mon Sep 17 00:00:00 2001
From: Peter Maydell <peter.maydell@linaro.org>
Date: Mon, 18 Feb 2013 16:58:24 +0000
Subject: [PATCH 09/70] omap_gptimer: Support ticks-per-sec > 32 bit values

TODO: need to review this change still
---
 hw/timer/omap_gptimer.c | 36 ++++++++++++++++++++++++++++--------
 1 file changed, 28 insertions(+), 8 deletions(-)

diff --git a/hw/timer/omap_gptimer.c b/hw/timer/omap_gptimer.c
index 016207f..259f5c4 100644
--- a/hw/timer/omap_gptimer.c
+++ b/hw/timer/omap_gptimer.c
@@ -100,11 +100,18 @@ static inline void omap_gp_timer_out(struct omap_gp_timer_s *timer, int level)
 
 static inline uint32_t omap_gp_timer_read(struct omap_gp_timer_s *timer)
 {
-    uint64_t distance;
+    uint64_t distance, rate;
 
     if (timer->st && timer->rate) {
         distance = qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL) - timer->time;
-        distance = muldiv64(distance, timer->rate, timer->ticks_per_sec);
+        /*if ticks_per_sec is bigger than 32bit we cannot use muldiv64*/
+        if (timer->ticks_per_sec > 0xffffffff) {
+            distance /= get_ticks_per_sec() / 1000; /*distance ms*/
+            rate = timer->rate >> (timer->pre ? timer->ptv + 1 : 0);
+            distance = muldiv64(distance, rate, 1000);
+        } else {
+            distance = muldiv64(distance, timer->rate, timer->ticks_per_sec);
+        }
 
         if (distance >= 0xffffffff - timer->val)
             return 0xffffffff;
@@ -124,19 +131,32 @@ static inline void omap_gp_timer_sync(struct omap_gp_timer_s *timer)
 
 static inline void omap_gp_timer_update(struct omap_gp_timer_s *timer)
 {
-    int64_t expires, matches;
+    int64_t expires, matches, rate;
 
     if (timer->st && timer->rate) {
-        expires = muldiv64(0x100000000ll - timer->val,
-                        timer->ticks_per_sec, timer->rate);
+        if (timer->ticks_per_sec > 0xffffffff) {
+            rate = timer->rate >> (timer->pre ? timer->ptv + 1 : 0);
+            expires = muldiv64(0x100000000ll - timer->val,
+                               get_ticks_per_sec(), rate);
+        } else {
+            expires = muldiv64(0x100000000ll - timer->val,
+                               timer->ticks_per_sec, timer->rate);
+        }
         timer_mod(timer->timer, timer->time + expires);
 
         if (timer->ce && timer->match_val >= timer->val) {
-            matches = muldiv64(timer->match_val - timer->val,
-                            timer->ticks_per_sec, timer->rate);
+            if (timer->ticks_per_sec > 0xffffffff) {
+                rate = timer->rate >> (timer->pre ? timer->ptv + 1 : 0);
+                matches = muldiv64(timer->match_val - timer->val,
+                                   get_ticks_per_sec(), rate);
+            } else {
+                matches = muldiv64(timer->match_val - timer->val,
+                                   timer->ticks_per_sec, timer->rate);
+            }
             timer_mod(timer->match, timer->time + matches);
-        } else
+        } else {
             timer_del(timer->match);
+        }
     } else {
         timer_del(timer->timer);
         timer_del(timer->match);
-- 
1.8.5.2

