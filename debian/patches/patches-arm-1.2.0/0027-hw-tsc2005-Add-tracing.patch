From a9c7a5b2d40c5799e7d5a6e1e0ae9a0ff4c0f719 Mon Sep 17 00:00:00 2001
From: Peter Maydell <peter.maydell@linaro.org>
Date: Wed, 4 Jul 2012 11:18:40 +0000
Subject: [PATCH 27/77] hw/tsc2005: Add tracing

---
 hw/tsc2005.c |   68 +++++++++++++++++++++++++++++++++++++++++++++++-----------
 1 file changed, 55 insertions(+), 13 deletions(-)

diff --git a/hw/tsc2005.c b/hw/tsc2005.c
index aec8527..b575a2d 100644
--- a/hw/tsc2005.c
+++ b/hw/tsc2005.c
@@ -23,6 +23,15 @@
 #include "console.h"
 #include "devices.h"
 
+//#define TSC2005_DEBUG
+
+#ifdef TSC2005_DEBUG
+#define TRACE(fmt, ...) fprintf(stderr, "%s@%d: " fmt "\n", \
+                                __FUNCTION__, __LINE__, ##__VA_ARGS__)
+#else
+#define TRACE(...)
+#endif
+
 #define TSC_CUT_RESOLUTION(value, p)	((value) >> (16 - (p ? 12 : 10)))
 
 typedef struct {
@@ -120,33 +129,46 @@ static uint16_t tsc2005_read(TSC2005State *s, int reg)
     switch (reg) {
     case 0x0:	/* X */
         s->dav &= ~mode_regs[TSC_MODE_X];
+        TRACE("X = %d", TSC_CUT_RESOLUTION(X_TRANSFORM(s), s->precision) +
+              (s->noise & 3));
         return TSC_CUT_RESOLUTION(X_TRANSFORM(s), s->precision) +
                 (s->noise & 3);
     case 0x1:	/* Y */
         s->dav &= ~mode_regs[TSC_MODE_Y];
         s->noise ++;
+        TRACE("Y = %d", TSC_CUT_RESOLUTION(Y_TRANSFORM(s), s->precision) ^
+              (s->noise & 3));
         return TSC_CUT_RESOLUTION(Y_TRANSFORM(s), s->precision) ^
                 (s->noise & 3);
     case 0x2:	/* Z1 */
         s->dav &= 0xdfff;
+        TRACE("Z1 = %d", TSC_CUT_RESOLUTION(Z1_TRANSFORM(s), s->precision) -
+              (s->noise & 3));
         return TSC_CUT_RESOLUTION(Z1_TRANSFORM(s), s->precision) -
                 (s->noise & 3);
     case 0x3:	/* Z2 */
         s->dav &= 0xefff;
+        TRACE("Z2 = %d", TSC_CUT_RESOLUTION(Z2_TRANSFORM(s), s->precision) |
+              (s->noise & 3));
         return TSC_CUT_RESOLUTION(Z2_TRANSFORM(s), s->precision) |
                 (s->noise & 3);
 
     case 0x4:	/* AUX */
         s->dav &= ~mode_regs[TSC_MODE_AUX];
+        TRACE("AUX = %d", TSC_CUT_RESOLUTION(AUX_VAL, s->precision));
         return TSC_CUT_RESOLUTION(AUX_VAL, s->precision);
 
     case 0x5:	/* TEMP1 */
         s->dav &= ~mode_regs[TSC_MODE_TEMP1];
+        TRACE("TEMP1 = %d", TSC_CUT_RESOLUTION(TEMP1_VAL, s->precision) -
+              (s->noise & 5));
         return TSC_CUT_RESOLUTION(TEMP1_VAL, s->precision) -
                 (s->noise & 5);
     case 0x6:	/* TEMP2 */
         s->dav &= 0xdfff;
         s->dav &= ~mode_regs[TSC_MODE_TEMP2];
+        TRACE("TEMP2 = %d", TSC_CUT_RESOLUTION(TEMP2_VAL, s->precision) ^
+              (s->noise & 3));
         return TSC_CUT_RESOLUTION(TEMP2_VAL, s->precision) ^
                 (s->noise & 3);
 
@@ -155,31 +177,43 @@ static uint16_t tsc2005_read(TSC2005State *s, int reg)
         s->dav &= ~(mode_regs[TSC_MODE_X_TEST] | mode_regs[TSC_MODE_Y_TEST] |
                         mode_regs[TSC_MODE_TS_TEST]);
         s->reset = 1;
+        TRACE("STATUS = 0x%04x", ret);
         return ret;
 
     case 0x8:	/* AUX high treshold */
+        TRACE("AUX high threshold = 0x%04x", s->aux_thr[1]);
         return s->aux_thr[1];
     case 0x9:	/* AUX low treshold */
+        TRACE("AUX low threshold = 0x%04x", s->aux_thr[0]);
         return s->aux_thr[0];
 
     case 0xa:	/* TEMP high treshold */
+        TRACE("TEMP high threshold = 0x%04x", s->temp_thr[1]);
         return s->temp_thr[1];
     case 0xb:	/* TEMP low treshold */
+        TRACE("TEMP low threshold = 0x%04x", s->temp_thr[0]);
         return s->temp_thr[0];
 
     case 0xc:	/* CFR0 */
+        TRACE("CFR0 = 0x%04x", (s->pressure << 15) | ((!s->busy) << 14) |
+              (s->nextprecision << 13) | s->timing[0]);
         return (s->pressure << 15) | ((!s->busy) << 14) |
                 (s->nextprecision << 13) | s->timing[0]; 
     case 0xd:	/* CFR1 */
+        TRACE("CFR1 = 0x%04x", s->timing[1]);
         return s->timing[1];
     case 0xe:	/* CFR2 */
+        TRACE("CFR2 = 0x%04x", (s->pin_func << 14) | s->filter);
         return (s->pin_func << 14) | s->filter;
 
     case 0xf:	/* Function select status */
+        TRACE("function select status = 0x%04x",
+              s->function >= 0 ? 1 << s->function : 0);
         return s->function >= 0 ? 1 << s->function : 0;
     }
 
     /* Never gets here */
+    TRACE("unknown register = 0xffff");
     return 0xffff;
 }
 
@@ -187,46 +221,52 @@ static void tsc2005_write(TSC2005State *s, int reg, uint16_t data)
 {
     switch (reg) {
     case 0x8:	/* AUX high treshold */
+        TRACE("AUX high threshold = 0x%04x", data);
         s->aux_thr[1] = data;
         break;
     case 0x9:	/* AUX low treshold */
+        TRACE("AUX low threshold = 0x%04x", data);
         s->aux_thr[0] = data;
         break;
 
     case 0xa:	/* TEMP high treshold */
+        TRACE("TEMP high threshold = 0x%04x", data);
         s->temp_thr[1] = data;
         break;
     case 0xb:	/* TEMP low treshold */
+        TRACE("TEMP low threshold = 0x%04x", data);
         s->temp_thr[0] = data;
         break;
 
     case 0xc:	/* CFR0 */
+        TRACE("CFR0 = 0x%04x", data);
         s->host_mode = data >> 15;
         if (s->enabled != !(data & 0x4000)) {
             s->enabled = !(data & 0x4000);
-            fprintf(stderr, "%s: touchscreen sense %sabled\n",
-                            __FUNCTION__, s->enabled ? "en" : "dis");
-            if (s->busy && !s->enabled)
+            TRACE("touchscreen sense %sabled", s->enabled ? "en" : "dis");
+            if (s->busy && !s->enabled) {
                 qemu_del_timer(s->timer);
+            }
             s->busy &= s->enabled;
         }
         s->nextprecision = (data >> 13) & 1;
         s->timing[0] = data & 0x1fff;
-        if ((s->timing[0] >> 11) == 3)
-            fprintf(stderr, "%s: illegal conversion clock setting\n",
-                            __FUNCTION__);
+        if ((s->timing[0] >> 11) == 3) {
+            TRACE("illegal conversion clock setting");
+        }
         break;
     case 0xd:	/* CFR1 */
+        TRACE("CFR1 = 0x%04x", data);
         s->timing[1] = data & 0xf07;
         break;
     case 0xe:	/* CFR2 */
+        TRACE("CFR2 = 0x%04x", data);
         s->pin_func = (data >> 14) & 3;
         s->filter = data & 0x3fff;
         break;
 
     default:
-        fprintf(stderr, "%s: write into read-only register %x\n",
-                        __FUNCTION__, reg);
+        TRACE("write into read-only register 0x%x, value 0x%04x", reg, data);
     }
 }
 
@@ -328,7 +368,7 @@ static uint8_t tsc2005_txrx_word(void *opaque, uint8_t value)
 {
     TSC2005State *s = opaque;
     uint32_t ret = 0;
-
+    TRACE("value = 0x%08x, state=%d", value, s->state + 1);
     switch (s->state ++) {
     case 0:
         if (value & 0x80) {
@@ -340,8 +380,8 @@ static uint8_t tsc2005_txrx_word(void *opaque, uint8_t value)
                 s->nextprecision = (value >> 2) & 1;
                 if (s->enabled != !(value & 1)) {
                     s->enabled = !(value & 1);
-                    fprintf(stderr, "%s: touchscreen sense %sabled\n",
-                                    __FUNCTION__, s->enabled ? "en" : "dis");
+                    TRACE("touchscreen sense %sabled",
+                          s->enabled ? "en" : "dis");
                     if (s->busy && !s->enabled)
                         qemu_del_timer(s->timer);
                     s->busy &= s->enabled;
@@ -392,7 +432,7 @@ static uint8_t tsc2005_txrx_word(void *opaque, uint8_t value)
 uint32_t tsc2005_txrx(void *opaque, uint32_t value, int len)
 {
     uint32_t ret = 0;
-
+    TRACE("value=0x%08x, len=%d", value, len);
     len &= ~7;
     while (len > 0) {
         len -= 8;
@@ -408,8 +448,10 @@ static void tsc2005_timer_tick(void *opaque)
 
     /* Timer ticked -- a set of conversions has been finished.  */
 
-    if (!s->busy)
+    if (!s->busy) {
+        TRACE("not busy -> exit");
         return;
+    }
 
     s->busy = 0;
     s->dav |= mode_regs[s->function];
-- 
1.7.9.5

