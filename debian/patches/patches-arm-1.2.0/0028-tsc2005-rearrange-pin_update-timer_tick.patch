From 87f4a97986d8ea7140fc6c6bd08223178547d227 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Juha=20Riihim=C3=A4ki?= <juha.riihimaki@nokia.com>
Date: Wed, 4 Jul 2012 11:18:41 +0000
Subject: [PATCH 28/77] tsc2005: rearrange pin_update/timer_tick

Rearrange the division of work between pin_update and
timer_tick functions.

TODO: this has the look of a bug fix but I have not identified what.
---
 hw/tsc2005.c |   73 +++++++++++++++++++++++++++++++++-------------------------
 1 file changed, 42 insertions(+), 31 deletions(-)

diff --git a/hw/tsc2005.c b/hw/tsc2005.c
index b575a2d..5a18607 100644
--- a/hw/tsc2005.c
+++ b/hw/tsc2005.c
@@ -2,7 +2,7 @@
  * TI TSC2005 emulator.
  *
  * Copyright (c) 2006 Andrzej Zaborowski  <balrog@zabor.org>
- * Copyright (C) 2008 Nokia Corporation
+ * Copyright (c) 2009-2010 Nokia Corporation
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU General Public License as
@@ -274,29 +274,16 @@ static void tsc2005_write(TSC2005State *s, int reg, uint16_t data)
 static void tsc2005_pin_update(TSC2005State *s)
 {
     int64_t expires;
-    int pin_state;
-
-    switch (s->pin_func) {
-    case 0:
-        pin_state = !s->pressure && !!s->dav;
-        break;
-    case 1:
-    case 3:
-    default:
-        pin_state = !s->dav;
-        break;
-    case 2:
-        pin_state = !s->pressure;
-    }
-
-    if (pin_state != s->irq) {
-        s->irq = pin_state;
-        qemu_set_irq(s->pint, s->irq);
-    }
-
+    TRACE("nextf=%d, press=%d, ena=%d, busy=%d, dav=0x%04x, irq=%d",
+          s->nextfunction, s->pressure, s->enabled, s->busy, s->dav, s->irq);
     switch (s->nextfunction) {
     case TSC_MODE_XYZ_SCAN:
     case TSC_MODE_XY_SCAN:
+            if (!s->pin_func && !s->dav) {
+                TRACE("all values read, lowering irq");
+                s->irq = 0;
+                qemu_set_irq(s->pint, s->irq);
+            }
         if (!s->host_mode && s->dav)
             s->enabled = 0;
         if (!s->pressure)
@@ -329,15 +316,14 @@ static void tsc2005_pin_update(TSC2005State *s)
         return;
     }
 
-    if (!s->enabled || s->busy)
-        return;
-
-    s->busy = 1;
-    s->precision = s->nextprecision;
-    s->function = s->nextfunction;
-    s->pdst = !s->pnd0;	/* Synchronised on internal clock */
-    expires = qemu_get_clock_ns(vm_clock) + (get_ticks_per_sec() >> 7);
-    qemu_mod_timer(s->timer, expires);
+    if (s->enabled && !s->busy) {
+        s->busy = 1;
+        s->precision = s->nextprecision;
+        s->function = s->nextfunction;
+        s->pdst = !s->pnd0;	/* Synchronised on internal clock */
+        expires = qemu_get_clock_ns(vm_clock) + (get_ticks_per_sec() >> 7);
+        qemu_mod_timer(s->timer, expires);
+    }
 }
 
 static void tsc2005_reset(TSC2005State *s)
@@ -444,6 +430,7 @@ uint32_t tsc2005_txrx(void *opaque, uint32_t value, int len)
 
 static void tsc2005_timer_tick(void *opaque)
 {
+    int pin_state;
     TSC2005State *s = opaque;
 
     /* Timer ticked -- a set of conversions has been finished.  */
@@ -453,10 +440,34 @@ static void tsc2005_timer_tick(void *opaque)
         return;
     }
 
+    switch (s->pin_func) {
+    case 0:
+        pin_state = s->pressure || !s->dav;
+        break;
+    case 1:
+    case 3:
+    default:
+        pin_state = !s->dav;
+        break;
+    case 2:
+        pin_state = s->pressure;
+    }
     s->busy = 0;
-    s->dav |= mode_regs[s->function];
+    if (!s->dav) {
+        TRACE("report new conversions ready");
+        s->dav |= mode_regs[s->function];
+    }
+    TRACE("pin_func=%d, pin_state=%d, pressure=%d, irq=%d, dav=0x%04x",
+          s->pin_func, pin_state, s->pressure, s->irq, s->dav);
     s->function = -1;
     tsc2005_pin_update(s);
+
+    if (pin_state != s->irq) {
+        TRACE("changing IRQ state to %d", pin_state);
+        s->irq = pin_state;
+        qemu_set_irq(s->pint, s->irq);
+    }
+    TRACE("done");
 }
 
 static void tsc2005_touchscreen_event(void *opaque,
-- 
1.7.9.5

