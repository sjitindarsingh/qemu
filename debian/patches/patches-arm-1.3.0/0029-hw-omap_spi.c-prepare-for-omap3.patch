From a71f7ba5037e922fa5938a870cf4e80305213e6b Mon Sep 17 00:00:00 2001
From: Riku Voipio <riku.voipio@nokia.com>
Date: Tue, 4 Dec 2012 14:10:07 +0000
Subject: [PATCH 29/77] hw/omap_spi.c prepare for omap3

---
 hw/omap.h     |   6 +-
 hw/omap2.c    |   4 +-
 hw/omap_spi.c | 409 +++++++++++++++++++++++++++++++++++++++++++++++-----------
 3 files changed, 343 insertions(+), 76 deletions(-)

diff --git a/hw/omap.h b/hw/omap.h
index 161a217..9f2612e 100644
--- a/hw/omap.h
+++ b/hw/omap.h
@@ -898,8 +898,10 @@ void omap_uwire_attach(struct omap_uwire_s *s,
 
 /* OMAP2 spi */
 struct omap_mcspi_s;
-struct omap_mcspi_s *omap_mcspi_init(struct omap_target_agent_s *ta, int chnum,
-                qemu_irq irq, qemu_irq *drq, omap_clk fclk, omap_clk iclk);
+struct omap_mcspi_s *omap_mcspi_init(struct omap_target_agent_s *ta,
+                                     struct omap_mpu_state_s *mp,
+                                     int chnum, qemu_irq irq, qemu_irq *drq,
+                                     omap_clk fclk, omap_clk iclk);
 void omap_mcspi_attach(struct omap_mcspi_s *s,
                 uint32_t (*txrx)(void *opaque, uint32_t, int), void *opaque,
                 int chipselect);
diff --git a/hw/omap2.c b/hw/omap2.c
index e929690..69141e2 100644
--- a/hw/omap2.c
+++ b/hw/omap2.c
@@ -2464,12 +2464,12 @@ struct omap_mpu_state_s *omap2420_mpu_init(MemoryRegion *sysmem,
                     &s->drq[OMAP24XX_DMA_MMC1_TX],
                     omap_findclk(s, "mmc_fclk"), omap_findclk(s, "mmc_iclk"));
 
-    s->mcspi[0] = omap_mcspi_init(omap_l4ta(s->l4, 35), 4,
+    s->mcspi[0] = omap_mcspi_init(omap_l4ta(s->l4, 35), s, 4,
                     qdev_get_gpio_in(s->ih[0], OMAP_INT_24XX_MCSPI1_IRQ),
                     &s->drq[OMAP24XX_DMA_SPI1_TX0],
                     omap_findclk(s, "spi1_fclk"),
                     omap_findclk(s, "spi1_iclk"));
-    s->mcspi[1] = omap_mcspi_init(omap_l4ta(s->l4, 36), 2,
+    s->mcspi[1] = omap_mcspi_init(omap_l4ta(s->l4, 36), s, 2,
                     qdev_get_gpio_in(s->ih[0], OMAP_INT_24XX_MCSPI2_IRQ),
                     &s->drq[OMAP24XX_DMA_SPI2_TX0],
                     omap_findclk(s, "spi2_fclk"),
diff --git a/hw/omap_spi.c b/hw/omap_spi.c
index 8ff01ed..0d641e4 100644
--- a/hw/omap_spi.c
+++ b/hw/omap_spi.c
@@ -22,11 +22,25 @@
 #include "hw.h"
 #include "omap.h"
 
-/* Multichannel SPI */
+//#define SPI_DEBUG
+
+#ifdef SPI_DEBUG
+#define TRACE(fmt,...) fprintf(stderr, "%s@%d: " fmt "\n", __FUNCTION__, \
+                               __LINE__, ##__VA_ARGS__);
+#else
+#define TRACE(...)
+#endif
+
+#define SPI_FIFOSIZE 64
+#define SPI_REV_OMAP2420 0x14
+#define SPI_REV_OMAP3430 0x21
+#define IS_OMAP3_SPI(s) ((s)->revision >= SPI_REV_OMAP3430)
+
 struct omap_mcspi_s {
     MemoryRegion iomem;
     qemu_irq irq;
     int chnum;
+    uint8_t revision;
 
     uint32_t sysconfig;
     uint32_t systest;
@@ -35,6 +49,16 @@ struct omap_mcspi_s {
     uint32_t wken;
     uint32_t control;
 
+    uint32_t xferlevel;
+    struct omap_mcspi_fifo_s {
+        int start;
+        int len;
+        int size;
+        uint8_t buf[SPI_FIFOSIZE];
+    } tx_fifo, rx_fifo;
+    int fifo_ch;
+    int fifo_wcnt;
+
     struct omap_mcspi_ch_s {
         qemu_irq txdrq;
         qemu_irq rxdrq;
@@ -47,7 +71,7 @@ struct omap_mcspi_s {
         uint32_t config;
         uint32_t status;
         uint32_t control;
-    } ch[4];
+    } ch[0];
 };
 
 static inline void omap_mcspi_interrupt_update(struct omap_mcspi_s *s)
@@ -55,57 +79,167 @@ static inline void omap_mcspi_interrupt_update(struct omap_mcspi_s *s)
     qemu_set_irq(s->irq, s->irqst & s->irqen);
 }
 
-static inline void omap_mcspi_dmarequest_update(struct omap_mcspi_ch_s *ch)
+static inline void omap_mcspi_dmarequest_update(struct omap_mcspi_s *s,
+                                                int chnum)
+{
+    struct omap_mcspi_ch_s *ch = &s->ch[chnum];
+    if ((ch->control & 1) &&                         /* EN */
+        (ch->config & (1 << 14)) &&                  /* DMAW */
+        (ch->status & (1 << 1)) &&                   /* TXS */
+        ((ch->config >> 12) & 3) != 1) {             /* TRM */
+        if (!IS_OMAP3_SPI(s) ||
+            !(ch->config & (1 << 27)) ||             /* FFEW */
+            s->tx_fifo.len <= (s->xferlevel & 0x3f)) /* AEL */
+            qemu_irq_raise(ch->txdrq);
+        else
+            qemu_irq_lower(ch->txdrq);
+    }
+    if ((ch->control & 1) &&                                /* EN */
+        (ch->config & (1 << 15)) &&                         /* DMAW */
+        (ch->status & (1 << 0)) &&                          /* RXS */
+        ((ch->config >> 12) & 3) != 2) {                    /* TRM */
+        if (!IS_OMAP3_SPI(s) ||
+            !(ch->config & (1 << 28)) ||                    /* FFER */
+            s->rx_fifo.len >= ((s->xferlevel >> 8) & 0x3f)) /* AFL */
+            qemu_irq_raise(ch->rxdrq);
+        else
+            qemu_irq_lower(ch->rxdrq);
+    }
+}
+
+static void omap_mcspi_fifo_reset(struct omap_mcspi_s *s)
 {
-    qemu_set_irq(ch->txdrq,
-                    (ch->control & 1) &&		/* EN */
-                    (ch->config & (1 << 14)) &&		/* DMAW */
-                    (ch->status & (1 << 1)) &&		/* TXS */
-                    ((ch->config >> 12) & 3) != 1);	/* TRM */
-    qemu_set_irq(ch->rxdrq,
-                    (ch->control & 1) &&		/* EN */
-                    (ch->config & (1 << 15)) &&		/* DMAW */
-                    (ch->status & (1 << 0)) &&		/* RXS */
-                    ((ch->config >> 12) & 3) != 2);	/* TRM */
+    struct omap_mcspi_ch_s *ch;
+
+    s->tx_fifo.len = 0;
+    s->rx_fifo.len = 0;
+    s->tx_fifo.start = 0;
+    s->rx_fifo.start = 0;
+    if (s->fifo_ch < 0) {
+        s->tx_fifo.size  = s->rx_fifo.size  = 0;
+    } else {
+        ch = &s->ch[s->fifo_ch];
+        s->tx_fifo.size = ((ch->config >> 27) & 1) ? SPI_FIFOSIZE : 0;
+        s->rx_fifo.size = ((ch->config >> 28) & 1) ? SPI_FIFOSIZE : 0;
+        if (((ch->config >> 27) & 3) == 3) {
+            s->tx_fifo.size >>= 1;
+            s->rx_fifo.size >>= 1;
+        }
+    }
+}
+
+/* returns next word in FIFO or the n first bytes if there is not
+ * enough data in FIFO */
+static uint32_t omap_mcspi_fifo_get(struct omap_mcspi_fifo_s *s, int wl)
+{
+    uint32_t v, sh;
+
+    for (v = 0, sh = 0; wl > 0 && s->len; wl -= 8, s->len--, sh += 8) {
+        v |= ((uint32_t)s->buf[s->start++]) << sh;
+        if (s->start >= s->size)
+            s->start = 0;
+    }
+    return v;
+}
+
+/* pushes a word to FIFO or the first n bytes of the word if the FIFO
+ * is too full to hold the full word */
+static void omap_mcspi_fifo_put(struct omap_mcspi_fifo_s *s, int wl,
+                                uint32_t v)
+{
+    int p = s->start + s->len;
+
+    for (; wl > 0 && s->len < s->size; wl -=8, v >>= 8, s->len++) {
+        if (p >= s->size)
+            p -= s->size;
+        s->buf[p++] = (uint8_t)(v & 0xff);
+    }
 }
 
 static void omap_mcspi_transfer_run(struct omap_mcspi_s *s, int chnum)
 {
     struct omap_mcspi_ch_s *ch = s->ch + chnum;
+    int trm = (ch->config >> 12) & 3;
+    int wl;
 
-    if (!(ch->control & 1))				/* EN */
+    if (!(ch->control & 1))                  /* EN */
         return;
-    if ((ch->status & (1 << 0)) &&			/* RXS */
-                    ((ch->config >> 12) & 3) != 2 &&	/* TRM */
-                    !(ch->config & (1 << 19)))		/* TURBO */
+    if ((ch->status & 1) && trm != 2 &&      /* RXS */
+        !(ch->config & (1 << 19)))           /* TURBO */
         goto intr_update;
-    if ((ch->status & (1 << 1)) &&			/* TXS */
-                    ((ch->config >> 12) & 3) != 1)	/* TRM */
+    if ((ch->status & (1 << 1)) && trm != 1) /* TXS */
         goto intr_update;
 
-    if (!(s->control & 1) ||				/* SINGLE */
-                    (ch->config & (1 << 20))) {		/* FORCE */
-        if (ch->txrx)
-            ch->rx = ch->txrx(ch->opaque, ch->tx,	/* WL */
-                            1 + (0x1f & (ch->config >> 7)));
+    if (!(s->control & 1) ||        /* SINGLE */
+        (ch->config & (1 << 20))) { /* FORCE */
+        if (ch->txrx) {
+            wl = 1 + (0x1f & (ch->config >> 7)); /* WL */
+            if (!IS_OMAP3_SPI(s) || s->fifo_ch != chnum ||
+                !((ch->config >> 27) & 3)) {     /* FFER | FFEW */
+                ch->rx = ch->txrx(ch->opaque, ch->tx, wl);
+            } else {
+                switch ((ch->config >> 27) & 3) {
+                case 1: /* !FFER, FFEW */
+                    if (trm != 1)
+                        ch->tx = omap_mcspi_fifo_get(&s->tx_fifo, wl);
+                    ch->rx = ch->txrx(ch->opaque, ch->tx, wl);
+                    s->fifo_wcnt--;
+                    break;
+                case 2: /* FFER, !FFEW */
+                    ch->rx = ch->txrx(ch->opaque, ch->tx, wl);
+                    if (trm != 2)
+                        omap_mcspi_fifo_put(&s->rx_fifo, wl, ch->rx);
+                    s->fifo_wcnt--;
+                    break;
+                case 3: /* FFER, FFEW */
+                    while (s->rx_fifo.len < s->rx_fifo.size &&
+                           s->tx_fifo.len && s->fifo_wcnt) {
+                        if (trm != 1)
+                            ch->tx = omap_mcspi_fifo_get(&s->tx_fifo, wl);
+                        ch->rx = ch->txrx(ch->opaque, ch->tx, wl);
+                        if (trm != 2)
+                            omap_mcspi_fifo_put(&s->rx_fifo, wl, ch->rx);
+                        s->fifo_wcnt--;
+                    }
+                    break;
+                default:
+                    break;
+                }
+                if ((ch->config & (1 << 28)) &&        /* FFER */
+                    s->rx_fifo.len >= s->rx_fifo.size)
+                    ch->status |= 1 << 6;              /* RXFFF */
+                ch->status &= ~(1 << 5);               /* RXFFE */
+                ch->status &= ~(1 << 4);               /* TXFFF */
+                if ((ch->config & (1 << 27)) &&        /* FFEW */
+                    !s->tx_fifo.len)
+                    ch->status |= 1 << 3;              /* TXFFE */
+                if (!s->fifo_wcnt &&
+                    ((s->xferlevel >> 16) & 0xffff))   /* WCNT */
+                    s->irqst |= 1 << 17;               /* EOW */
+            }
+        }
     }
 
     ch->tx = 0;
-    ch->status |= 1 << 2;				/* EOT */
-    ch->status |= 1 << 1;				/* TXS */
-    if (((ch->config >> 12) & 3) != 2)			/* TRM */
-        ch->status |= 1 << 0;				/* RXS */
+    ch->status |= 1 << 2;               /* EOT */
+    ch->status |= 1 << 1;               /* TXS */
+    if (trm != 2)
+        ch->status |= 1;                /* RXS */
 
 intr_update:
-    if ((ch->status & (1 << 0)) &&			/* RXS */
-                    ((ch->config >> 12) & 3) != 2 &&	/* TRM */
-                    !(ch->config & (1 << 19)))		/* TURBO */
-        s->irqst |= 1 << (2 + 4 * chnum);		/* RX_FULL */
-    if ((ch->status & (1 << 1)) &&			/* TXS */
-                    ((ch->config >> 12) & 3) != 1)	/* TRM */
-        s->irqst |= 1 << (0 + 4 * chnum);		/* TX_EMPTY */
+    if ((ch->status & 1) &&	trm != 2 &&                     /* RXS */
+        !(ch->config & (1 << 19)))                          /* TURBO */
+        if (!IS_OMAP3_SPI(s) || s->fifo_ch != chnum ||
+            !((ch->config >> 28) & 1) ||                    /* FFER */
+            s->rx_fifo.len >= ((s->xferlevel >> 8) & 0x3f)) /* AFL */
+            s->irqst |= 1 << (2 + 4 * chnum);               /* RX_FULL */
+    if ((ch->status & (1 << 1)) && trm != 1)                /* TXS */
+        if (!IS_OMAP3_SPI(s) || s->fifo_ch != chnum ||
+            !((ch->config >> 27) & 1) ||                    /* FFEW */
+            s->tx_fifo.len <= (s->xferlevel & 0x3f))        /* AEL */
+            s->irqst |= 1 << (4 * chnum);                   /* TX_EMPTY */
     omap_mcspi_interrupt_update(s);
-    omap_mcspi_dmarequest_update(ch);
+    omap_mcspi_dmarequest_update(s, chnum);
 }
 
 void omap_mcspi_reset(struct omap_mcspi_s *s)
@@ -119,12 +253,15 @@ void omap_mcspi_reset(struct omap_mcspi_s *s)
     s->wken = 0;
     s->control = 4;
 
-    for (ch = 0; ch < 4; ch ++) {
+    s->fifo_ch = -1;
+    omap_mcspi_fifo_reset(s);
+
+    for (ch = 0; ch < s->chnum; ch ++) {
         s->ch[ch].config = 0x060000;
         s->ch[ch].status = 2;				/* TXS */
         s->ch[ch].control = 0;
 
-        omap_mcspi_dmarequest_update(s->ch + ch);
+        omap_mcspi_dmarequest_update(s, ch);
     }
 
     omap_mcspi_interrupt_update(s);
@@ -143,27 +280,35 @@ static uint64_t omap_mcspi_read(void *opaque, hwaddr addr,
 
     switch (addr) {
     case 0x00:	/* MCSPI_REVISION */
-        return 0x91;
+        TRACE("REVISION = 0x%08x", s->revision);
+        return s->revision;
 
     case 0x10:	/* MCSPI_SYSCONFIG */
+        TRACE("SYSCONFIG = 0x%08x", s->sysconfig);
         return s->sysconfig;
 
     case 0x14:	/* MCSPI_SYSSTATUS */
+        TRACE("SYSSTATUS = 0x00000001");
         return 1;					/* RESETDONE */
 
     case 0x18:	/* MCSPI_IRQSTATUS */
+        TRACE("IRQSTATUS = 0x%08x", s->irqst);
         return s->irqst;
 
     case 0x1c:	/* MCSPI_IRQENABLE */
+        TRACE("IRQENABLE = 0x%08x", s->irqen);
         return s->irqen;
 
     case 0x20:	/* MCSPI_WAKEUPENABLE */
+        TRACE("WAKEUPENABLE = 0x%08x", s->wken);
         return s->wken;
 
     case 0x24:	/* MCSPI_SYST */
+        TRACE("SYST = 0x%08x", s->systest);
         return s->systest;
 
     case 0x28:	/* MCSPI_MODULCTRL */
+        TRACE("MODULCTRL = 0x%08x", s->control);
         return s->control;
 
     case 0x68: ch ++;
@@ -173,7 +318,9 @@ static uint64_t omap_mcspi_read(void *opaque, hwaddr addr,
     case 0x40: ch ++;
         /* fall through */
     case 0x2c:	/* MCSPI_CHCONF */
-        return s->ch[ch].config;
+        TRACE("CHCONF%d = 0x%08x", ch,
+              (ch < s->chnum) ? s->ch[ch].config : 0);
+        return (ch < s->chnum) ? s->ch[ch].config : 0;
 
     case 0x6c: ch ++;
         /* fall through */
@@ -182,7 +329,9 @@ static uint64_t omap_mcspi_read(void *opaque, hwaddr addr,
     case 0x44: ch ++;
         /* fall through */
     case 0x30:	/* MCSPI_CHSTAT */
-        return s->ch[ch].status;
+        TRACE("CHSTAT%d = 0x%08x", ch,
+              (ch < s->chnum) ? s->ch[ch].status : 0);
+        return (ch < s->chnum) ? s->ch[ch].status : 0;
 
     case 0x70: ch ++;
         /* fall through */
@@ -191,7 +340,9 @@ static uint64_t omap_mcspi_read(void *opaque, hwaddr addr,
     case 0x48: ch ++;
         /* fall through */
     case 0x34:	/* MCSPI_CHCTRL */
-        return s->ch[ch].control;
+        TRACE("CHCTRL%d = 0x%08x", ch,
+              (ch < s->chnum) ? s->ch[ch].control : 0);
+        return (ch < s->chnum) ? s->ch[ch].control : 0;
 
     case 0x74: ch ++;
         /* fall through */
@@ -200,7 +351,9 @@ static uint64_t omap_mcspi_read(void *opaque, hwaddr addr,
     case 0x4c: ch ++;
         /* fall through */
     case 0x38:	/* MCSPI_TX */
-        return s->ch[ch].tx;
+        TRACE("TX%d = 0x%08x", ch,
+              (ch < s->chnum) ? s->ch[ch].tx : 0);
+        return (ch < s->chnum) ? s->ch[ch].tx : 0;
 
     case 0x78: ch ++;
         /* fall through */
@@ -209,10 +362,50 @@ static uint64_t omap_mcspi_read(void *opaque, hwaddr addr,
     case 0x50: ch ++;
         /* fall through */
     case 0x3c:	/* MCSPI_RX */
-        s->ch[ch].status &= ~(1 << 0);			/* RXS */
-        ret = s->ch[ch].rx;
-        omap_mcspi_transfer_run(s, ch);
-        return ret;
+        if (ch < s->chnum) {
+            if (!IS_OMAP3_SPI(s) || ch != s->fifo_ch ||
+                !(s->ch[ch].config & (1 << 28))) { /* FFER */
+                s->ch[ch].status &= ~1;            /* RXS */
+                ret = s->ch[ch].rx;
+                TRACE("RX%d = 0x%08x", ch, ret);
+                omap_mcspi_transfer_run(s, ch);
+                return ret;
+            }
+            if (!s->rx_fifo.len) {
+                TRACE("rxfifo underflow!");
+            } else {
+                qemu_irq_lower(s->ch[ch].rxdrq);
+                s->ch[ch].status &= ~(1 << 6);                 /* RXFFF */
+                if (((s->ch[ch].config >> 12) & 3) != 2)        /* TRM */
+                    ret = omap_mcspi_fifo_get(&s->rx_fifo,
+                        1 + ((s->ch[ch].config >> 7) & 0x1f)); /* WL */
+                else
+                    ret = s->ch[ch].rx;
+                TRACE("RX%d = 0x%08x", ch, ret);
+                if (!s->rx_fifo.len) {
+                    s->ch[ch].status &= ~1;     /* RXS */
+                    s->ch[ch].status |= 1 << 5; /* RXFFE */
+                    omap_mcspi_transfer_run(s, ch);
+                }
+                return ret;
+            }
+        }
+        TRACE("RX%d = 0x00000000", ch);
+        return 0;
+
+    case 0x7c: /* MCSPI_XFERLEVEL */
+        if (IS_OMAP3_SPI(s)) {
+            if ((s->xferlevel >> 16) & 0xffff) /* WCNT */
+                ret = ((s->xferlevel & 0xffff0000) - (s->fifo_wcnt << 16));
+            else
+                ret = ((-s->fifo_wcnt) & 0xffff) << 16;
+            TRACE("XFERLEVEL = 0x%08x", (s->xferlevel & 0xffff) | ret);
+            return (s->xferlevel & 0xffff) | ret;
+        }
+        break;
+
+    default:
+        break;
     }
 
     OMAP_BAD_REG(addr);
@@ -223,6 +416,7 @@ static void omap_mcspi_write(void *opaque, hwaddr addr,
                              uint64_t value, unsigned size)
 {
     struct omap_mcspi_s *s = (struct omap_mcspi_s *) opaque;
+    uint32_t old;
     int ch = 0;
 
     if (size != 4) {
@@ -240,16 +434,19 @@ static void omap_mcspi_write(void *opaque, hwaddr addr,
     case 0x64:	/* MCSPI_RX2 */
     case 0x6c:	/* MCSPI_CHSTAT3 */
     case 0x78:	/* MCSPI_RX3 */
-        OMAP_RO_REG(addr);
+        /* silently ignore */
+        //OMAP_RO_REGV(addr, value);
         return;
 
     case 0x10:	/* MCSPI_SYSCONFIG */
+        TRACE("SYSCONFIG = 0x%08x", value);
         if (value & (1 << 1))				/* SOFTRESET */
             omap_mcspi_reset(s);
         s->sysconfig = value & 0x31d;
         break;
 
     case 0x18:	/* MCSPI_IRQSTATUS */
+        TRACE("IRQSTATUS = 0x%08x", value);
         if (!((s->control & (1 << 3)) && (s->systest & (1 << 11)))) {
             s->irqst &= ~value;
             omap_mcspi_interrupt_update(s);
@@ -257,15 +454,18 @@ static void omap_mcspi_write(void *opaque, hwaddr addr,
         break;
 
     case 0x1c:	/* MCSPI_IRQENABLE */
-        s->irqen = value & 0x1777f;
+        TRACE("IRQENABLE = 0x%08x", value);
+        s->irqen = value & (IS_OMAP3_SPI(s) ? 0x3777f : 0x1777f);
         omap_mcspi_interrupt_update(s);
         break;
 
     case 0x20:	/* MCSPI_WAKEUPENABLE */
+        TRACE("WAKEUPENABLE = 0x%08x", value);
         s->wken = value & 1;
         break;
 
     case 0x24:	/* MCSPI_SYST */
+        TRACE("SYST = 0x%08x", value);
         if (s->control & (1 << 3))			/* SYSTEM_TEST */
             if (value & (1 << 11)) {			/* SSB */
                 s->irqst |= 0x1777f;
@@ -275,9 +475,10 @@ static void omap_mcspi_write(void *opaque, hwaddr addr,
         break;
 
     case 0x28:	/* MCSPI_MODULCTRL */
+        TRACE("MODULCTRL = 0x%08x", value);
         if (value & (1 << 3))				/* SYSTEM_TEST */
             if (s->systest & (1 << 11)) {		/* SSB */
-                s->irqst |= 0x1777f;
+                s->irqst |= IS_OMAP3_SPI(s) ? 0x3777f : 0x1777f;
                 omap_mcspi_interrupt_update(s);
             }
         s->control = value & 0xf;
@@ -290,14 +491,30 @@ static void omap_mcspi_write(void *opaque, hwaddr addr,
     case 0x40: ch ++;
         /* fall through */
     case 0x2c:	/* MCSPI_CHCONF */
-        if ((value ^ s->ch[ch].config) & (3 << 14))	/* DMAR | DMAW */
-            omap_mcspi_dmarequest_update(s->ch + ch);
-        if (((value >> 12) & 3) == 3)			/* TRM */
-            fprintf(stderr, "%s: invalid TRM value (3)\n", __FUNCTION__);
-        if (((value >> 7) & 0x1f) < 3)			/* WL */
-            fprintf(stderr, "%s: invalid WL value (%" PRIx64 ")\n",
-                            __FUNCTION__, (value >> 7) & 0x1f);
-        s->ch[ch].config = value & 0x7fffff;
+        TRACE("CHCONF%d = 0x%08x", ch, value);
+        if (ch < s->chnum) {
+            old = s->ch[ch].config;
+            s->ch[ch].config = value & (IS_OMAP3_SPI(s)
+                                        ? 0x3fffffff : 0x7fffff);
+            if (IS_OMAP3_SPI(s) &&
+                ((value ^ old) & (3 << 27))) { /* FFER | FFEW */
+                s->fifo_ch = ((value & (3 << 27))) ? ch : -1;
+                omap_mcspi_fifo_reset(s);
+            }
+            if (((value ^ old) & (3 << 14)) || /* DMAR | DMAW */
+                (IS_OMAP3_SPI(s) &&
+                 ((value ^ old) & (3 << 27)))) /* FFER | FFEW */
+                omap_mcspi_dmarequest_update(s, ch);
+            if (((value >> 12) & 3) == 3) {   /* TRM */
+                TRACE("invalid TRM value (3)");
+            }
+                if (((value >> 7) & 0x1f) < 3) {  /* WL */
+                TRACE("invalid WL value (%" PRIx64 ")", (value >> 7) & 0x1f);
+                }
+            if (IS_OMAP3_SPI(s) && ((value >> 23) & 1)) { /* SBE */
+                TRACE("start-bit mode is not supported");
+            }
+        }
         break;
 
     case 0x70: ch ++;
@@ -307,11 +524,16 @@ static void omap_mcspi_write(void *opaque, hwaddr addr,
     case 0x48: ch ++;
         /* fall through */
     case 0x34:	/* MCSPI_CHCTRL */
-        if (value & ~s->ch[ch].control & 1) {		/* EN */
-            s->ch[ch].control |= 1;
-            omap_mcspi_transfer_run(s, ch);
-        } else
-            s->ch[ch].control = value & 1;
+        TRACE("CHCTRL%d = 0x%08x", ch, value);
+        if (ch < s->chnum) {
+            old = s->ch[ch].control;
+            s->ch[ch].control = value & (IS_OMAP3_SPI(s) ? 0xff01 : 1);
+            if (value & ~old & 1) { /* EN */
+                if (IS_OMAP3_SPI(s) && s->fifo_ch == ch)
+                    omap_mcspi_fifo_reset(s);
+                omap_mcspi_transfer_run(s, ch);
+            }
+        }
         break;
 
     case 0x74: ch ++;
@@ -321,9 +543,47 @@ static void omap_mcspi_write(void *opaque, hwaddr addr,
     case 0x4c: ch ++;
         /* fall through */
     case 0x38:	/* MCSPI_TX */
-        s->ch[ch].tx = value;
-        s->ch[ch].status &= ~(1 << 1);			/* TXS */
-        omap_mcspi_transfer_run(s, ch);
+        TRACE("TX%d = 0x%08x", ch, value);
+        if (ch < s->chnum) {
+            if (!IS_OMAP3_SPI(s) || s->fifo_ch != ch ||
+                !(s->ch[ch].config & (1 << 27))) { /* FFEW */
+                s->ch[ch].tx = value;
+                s->ch[ch].status &= ~0x06;         /* EOT | TXS */
+                omap_mcspi_transfer_run(s, ch);
+            } else {
+                if (s->tx_fifo.len >= s->tx_fifo.size) {
+                    TRACE("txfifo overflow!");
+                } else {
+                    qemu_irq_lower(s->ch[ch].txdrq);
+                    s->ch[ch].status &= ~0x0e;      /* TXFFE | EOT | TXS */
+                    if (((s->ch[ch].config >> 12) & 3) != 1) {    /* TRM */
+                        omap_mcspi_fifo_put(
+                            &s->tx_fifo,
+                            1 + ((s->ch[ch].config >> 7) & 0x1f), /* WL */
+                            value);
+                        if (s->tx_fifo.len >= s->tx_fifo.size)
+                            s->ch[ch].status |= 1 << 4;        /* TXFFF */
+                        if (s->tx_fifo.len >= (s->xferlevel & 0x3f))
+                            omap_mcspi_transfer_run(s, ch);
+                    } else {
+                        s->ch[ch].tx = value;
+                        omap_mcspi_transfer_run(s, ch);
+                    }
+                }
+            }
+        }
+        break;
+
+    case 0x7c: /* MCSPI_XFERLEVEL */
+        TRACE("XFERLEVEL = 0x%08x", value);
+        if (IS_OMAP3_SPI(s)) {
+            if (value != s->xferlevel) {
+                s->fifo_wcnt = (value >> 16) & 0xffff;
+                s->xferlevel = value & 0xffff3f3f;
+                omap_mcspi_fifo_reset(s);
+            }
+        } else
+            OMAP_BAD_REG(addr);
         break;
 
     default:
@@ -338,15 +598,19 @@ static const MemoryRegionOps omap_mcspi_ops = {
     .endianness = DEVICE_NATIVE_ENDIAN,
 };
 
-struct omap_mcspi_s *omap_mcspi_init(struct omap_target_agent_s *ta, int chnum,
-                qemu_irq irq, qemu_irq *drq, omap_clk fclk, omap_clk iclk)
+struct omap_mcspi_s *omap_mcspi_init(struct omap_target_agent_s *ta,
+                                     struct omap_mpu_state_s *mpu,
+                                     int chnum, qemu_irq irq, qemu_irq *drq,
+                                     omap_clk fclk, omap_clk iclk)
 {
-    struct omap_mcspi_s *s = (struct omap_mcspi_s *)
-            g_malloc0(sizeof(struct omap_mcspi_s));
+    struct omap_mcspi_s *s = g_malloc0(sizeof(*s) +
+        chnum * sizeof(struct omap_mcspi_ch_s));
     struct omap_mcspi_ch_s *ch = s->ch;
 
     s->irq = irq;
     s->chnum = chnum;
+    /* revision was hardcoded as 0x91 in original code -- odd */
+    s->revision = cpu_class_omap3(mpu) ? SPI_REV_OMAP3430 : SPI_REV_OMAP2420;
     while (chnum --) {
         ch->txdrq = *drq ++;
         ch->rxdrq = *drq ++;
@@ -362,8 +626,9 @@ struct omap_mcspi_s *omap_mcspi_init(struct omap_target_agent_s *ta, int chnum,
 }
 
 void omap_mcspi_attach(struct omap_mcspi_s *s,
-                uint32_t (*txrx)(void *opaque, uint32_t, int), void *opaque,
-                int chipselect)
+                       uint32_t (*txrx)(void *opaque, uint32_t, int),
+                       void *opaque,
+                       int chipselect)
 {
     if (chipselect < 0 || chipselect >= s->chnum)
         hw_error("%s: Bad chipselect %i\n", __FUNCTION__, chipselect);
-- 
1.8.1.2

