From 9c84371bc9656c7354a217aaf6bc1bf37ffceb16 Mon Sep 17 00:00:00 2001
From: Peter Maydell <peter.maydell@linaro.org>
Date: Fri, 22 Nov 2013 17:17:16 +0000
Subject: [PATCH 09/49] target-arm: Don't hardcode KVM target CPU to be A15

Instead of assuming that a KVM target CPU must always be a
Cortex-A15 and hardcoding this in kvm_arch_init_vcpu(),
store the KVM_ARM_TARGET_* value in the ARMCPU class,
and use that.

Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
Reviewed-by: Christoffer Dall <christoffer.dall@linaro.org>
Message-id: 1385140638-10444-10-git-send-email-peter.maydell@linaro.org
---
 target-arm/cpu-qom.h    |  5 +++++
 target-arm/cpu.c        |  2 ++
 target-arm/kvm-consts.h | 11 +++++++++++
 target-arm/kvm.c        |  7 ++++++-
 4 files changed, 24 insertions(+), 1 deletion(-)

Index: qemu/target-arm/cpu-qom.h
===================================================================
--- qemu.orig/target-arm/cpu-qom.h	2014-01-10 12:07:30.784166081 -0600
+++ qemu/target-arm/cpu-qom.h	2014-01-10 12:07:30.776166081 -0600
@@ -97,6 +97,11 @@ typedef struct ARMCPU {
     /* Should CPU start in PSCI powered-off state? */
     bool start_powered_off;
 
+    /* [QEMU_]KVM_ARM_TARGET_* constant for this CPU, or
+     * QEMU_KVM_ARM_TARGET_NONE if the kernel doesn't support this CPU type.
+     */
+    uint32_t kvm_target;
+
     /* The instance init functions for implementation-specific subclasses
      * set these fields to specify the implementation-dependent values of
      * various constant registers and reset values of non-constant
Index: qemu/target-arm/cpu.c
===================================================================
--- qemu.orig/target-arm/cpu.c	2014-01-10 12:07:30.784166081 -0600
+++ qemu/target-arm/cpu.c	2014-01-10 12:07:50.948166534 -0600
@@ -223,6 +223,7 @@ static void arm_cpu_initfn(Object *obj)
      * picky DTB consumer will also provide a helpful error message.
      */
     cpu->dtb_compatible = "qemu,unknown";
+    cpu->kvm_target = QEMU_KVM_ARM_TARGET_NONE;
 
     if (tcg_enabled() && !inited) {
         inited = true;
@@ -729,6 +730,7 @@ static void cortex_a15_initfn(Object *ob
     set_feature(&cpu->env, ARM_FEATURE_DUMMY_C15_REGS);
     set_feature(&cpu->env, ARM_FEATURE_LPAE);
     set_feature(&cpu->env, ARM_FEATURE_TRUSTZONE);
+    cpu->kvm_target = QEMU_KVM_ARM_TARGET_CORTEX_A15;
     cpu->midr = 0x412fc0f1;
     cpu->reset_fpsid = 0x410430f0;
     cpu->mvfr0 = 0x10110222;
Index: qemu/target-arm/kvm-consts.h
===================================================================
--- qemu.orig/target-arm/kvm-consts.h	2014-01-10 12:07:30.784166081 -0600
+++ qemu/target-arm/kvm-consts.h	2014-01-10 12:07:30.776166081 -0600
@@ -48,6 +48,17 @@ MISMATCH_CHECK(PSCI_FN_CPU_OFF, KVM_PSCI
 MISMATCH_CHECK(PSCI_FN_CPU_ON, KVM_PSCI_FN_CPU_ON)
 MISMATCH_CHECK(PSCI_FN_MIGRATE, KVM_PSCI_FN_MIGRATE)
 
+#define QEMU_KVM_ARM_TARGET_CORTEX_A15 0
+
+/* There's no kernel define for this: sentinel value which
+ * matches no KVM target value for either 64 or 32 bit
+ */
+#define QEMU_KVM_ARM_TARGET_NONE UINT_MAX
+
+#ifndef TARGET_AARCH64
+MISMATCH_CHECK(QEMU_KVM_ARM_TARGET_CORTEX_A15, KVM_ARM_TARGET_CORTEX_A15)
+#endif
+
 #undef MISMATCH_CHECK
 
 #endif
Index: qemu/target-arm/kvm.c
===================================================================
--- qemu.orig/target-arm/kvm.c	2014-01-10 12:07:30.784166081 -0600
+++ qemu/target-arm/kvm.c	2014-01-10 12:07:30.776166081 -0600
@@ -77,7 +77,12 @@ int kvm_arch_init_vcpu(CPUState *cs)
     struct kvm_reg_list *rlp;
     ARMCPU *cpu = ARM_CPU(cs);
 
-    init.target = KVM_ARM_TARGET_CORTEX_A15;
+    if (cpu->kvm_target == QEMU_KVM_ARM_TARGET_NONE) {
+        fprintf(stderr, "KVM is not supported for this guest CPU type\n");
+        return -EINVAL;
+    }
+
+    init.target = cpu->kvm_target;
     memset(init.features, 0, sizeof(init.features));
     if (cpu->start_powered_off) {
         init.features[0] = 1 << KVM_ARM_VCPU_POWER_OFF;
