From 7d7116b52cf4462f11de830f8ca755f22686285e Mon Sep 17 00:00:00 2001
From: Riku Voipio <riku.voipio@nokia.com>
Date: Mon, 18 Feb 2013 16:58:25 +0000
Subject: [PATCH 13/70] hw/omap_sdrc.c: Implement reading and writing of more
 registers
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Implement SDRC registers as able to be written and read back,
rather than simply being unwritable and returning 0.

TODO: there are a few TODO remarks and we need to check vs the
TRM but this is pretty close to upstreamable.

Signed-off-by: Juha Riihim√§ki <juha.riihimaki@nokia.com>
[Riku Voipio: Fixes and restructuring patchset]
Signed-off-by: Riku Voipio <riku.voipio@iki.fi>
[Peter Maydell: More fixes and cleanups for upstream submission]
Signed-off-by:  Peter Maydell <peter.maydell@linaro.org>
---
 hw/misc/omap_sdrc.c | 282 ++++++++++++++++++++++++++++++++++++++--------------
 1 file changed, 209 insertions(+), 73 deletions(-)

diff --git a/hw/misc/omap_sdrc.c b/hw/misc/omap_sdrc.c
index ed62caf..ad3b716 100644
--- a/hw/misc/omap_sdrc.c
+++ b/hw/misc/omap_sdrc.c
@@ -24,62 +24,133 @@
 struct omap_sdrc_s {
     MemoryRegion iomem;
     uint8_t config;
+    uint32_t cscfg;
+    uint32_t sharing;
+    uint32_t dlla_ctrl;
+    uint32_t power_reg;
+    struct {
+        uint32_t mcfg;
+        uint32_t mr;
+        uint32_t emr2;
+        uint32_t actim_ctrla;
+        uint32_t actim_ctrlb;
+        uint32_t rfr_ctrl;
+        uint32_t manual;
+    } cs[2];
 };
 
 void omap_sdrc_reset(struct omap_sdrc_s *s)
 {
-    s->config = 0x10;
+    /* TODO: ideally we should copy s->sharing, s->cs[*].mcfg
+     * from system control module
+     */
+    s->config    = 0x10;
+    s->cscfg     = 0x4;
+    s->sharing   = 0;
+    s->dlla_ctrl = 0;
+    s->power_reg = 0x85;
+    s->cs[0].mcfg        = s->cs[1].mcfg        = 0;
+    s->cs[0].mr          = s->cs[1].mr          = 0x0024;
+    s->cs[0].emr2        = s->cs[1].emr2        = 0;
+    s->cs[0].actim_ctrla = s->cs[1].actim_ctrla = 0;
+    s->cs[0].actim_ctrlb = s->cs[1].actim_ctrlb = 0;
+    s->cs[0].rfr_ctrl    = s->cs[1].rfr_ctrl    = 0;
+    s->cs[0].manual      = s->cs[1].manual      = 0;
 }
 
 static uint64_t omap_sdrc_read(void *opaque, hwaddr addr,
                                unsigned size)
 {
     struct omap_sdrc_s *s = (struct omap_sdrc_s *) opaque;
+    int cs = 0;
 
     if (size != 4) {
         return omap_badwidth_read32(opaque, addr);
     }
 
     switch (addr) {
-    case 0x00:	/* SDRC_REVISION */
+    case 0x00: /* SDRC_REVISION */
         return 0x20;
 
-    case 0x10:	/* SDRC_SYSCONFIG */
+    case 0x10: /* SDRC_SYSCONFIG */
         return s->config;
 
-    case 0x14:	/* SDRC_SYSSTATUS */
-        return 1;						/* RESETDONE */
-
-    case 0x40:	/* SDRC_CS_CFG */
-    case 0x44:	/* SDRC_SHARING */
-    case 0x48:	/* SDRC_ERR_ADDR */
-    case 0x4c:	/* SDRC_ERR_TYPE */
-    case 0x60:	/* SDRC_DLLA_SCTRL */
-    case 0x64:	/* SDRC_DLLA_STATUS */
-    case 0x68:	/* SDRC_DLLB_CTRL */
-    case 0x6c:	/* SDRC_DLLB_STATUS */
-    case 0x70:	/* SDRC_POWER */
-    case 0x80:	/* SDRC_MCFG_0 */
-    case 0x84:	/* SDRC_MR_0 */
-    case 0x88:	/* SDRC_EMR1_0 */
-    case 0x8c:	/* SDRC_EMR2_0 */
-    case 0x90:	/* SDRC_EMR3_0 */
-    case 0x94:	/* SDRC_DCDL1_CTRL */
-    case 0x98:	/* SDRC_DCDL2_CTRL */
-    case 0x9c:	/* SDRC_ACTIM_CTRLA_0 */
-    case 0xa0:	/* SDRC_ACTIM_CTRLB_0 */
-    case 0xa4:	/* SDRC_RFR_CTRL_0 */
-    case 0xa8:	/* SDRC_MANUAL_0 */
-    case 0xb0:	/* SDRC_MCFG_1 */
-    case 0xb4:	/* SDRC_MR_1 */
-    case 0xb8:	/* SDRC_EMR1_1 */
-    case 0xbc:	/* SDRC_EMR2_1 */
-    case 0xc0:	/* SDRC_EMR3_1 */
-    case 0xc4:	/* SDRC_ACTIM_CTRLA_1 */
-    case 0xc8:	/* SDRC_ACTIM_CTRLB_1 */
-    case 0xd4:	/* SDRC_RFR_CTRL_1 */
-    case 0xd8:	/* SDRC_MANUAL_1 */
+    case 0x14: /* SDRC_SYSSTATUS */
+        return 1; /* RESETDONE */
+
+    case 0x40: /* SDRC_CS_CFG */
+        return s->cscfg;
+
+    case 0x44: /* SDRC_SHARING */
+        return s->sharing;
+
+    case 0x48: /* SDRC_ERR_ADDR */
+        return 0;
+
+    case 0x4c: /* SDRC_ERR_TYPE */
+        return 0x8;
+
+    case 0x60: /* SDRC_DLLA_SCTRL */
+        return s->dlla_ctrl;
+
+    case 0x64: /* SDRC_DLLA_STATUS */
+        return ~(s->dlla_ctrl & 0x4);
+
+    case 0x68: /* SDRC_DLLB_CTRL */
+    case 0x6c: /* SDRC_DLLB_STATUS */
         return 0x00;
+
+    case 0x70: /* SDRC_POWER */
+        return s->power_reg;
+
+    case 0xb0 ... 0xd8:
+        cs = 1;
+        addr -= 0x30;
+       /* fall through */
+    case 0x80 ... 0xa8:
+        switch (addr & 0x3f) {
+        case 0x00: /* SDRC_MCFG_x */
+            return s->cs[cs].mcfg;
+        case 0x04: /* SDRC_MR_x */
+            return s->cs[cs].mr;
+        case 0x08: /* SDRC_EMR1_x */
+            return 0x00;
+        case 0x0c: /* SDRC_EMR2_x */
+            return s->cs[cs].emr2;
+        case 0x10: /* SDRC_EMR3_x */
+            return 0x00;
+        case 0x14:
+            if (cs) {
+                return s->cs[1].actim_ctrla; /* SDRC_ACTIM_CTRLA_1 */
+            }
+            return 0x00;                    /* SDRC_DCDL1_CTRL */
+        case 0x18:
+            if (cs) {
+                return s->cs[1].actim_ctrlb; /* SDRC_ACTIM_CTRLB_1 */
+            }
+            return 0x00;                    /* SDRC_DCDL2_CTRL */
+        case 0x1c:
+            if (!cs) {
+                return s->cs[0].actim_ctrla; /* SDRC_ACTIM_CTRLA_0 */
+            }
+            break;
+        case 0x20:
+            if (!cs) {
+                return s->cs[0].actim_ctrlb; /* SDRC_ACTIM_CTRLB_0 */
+            }
+            break;
+        case 0x24: /* SDRC_RFR_CTRL_x */
+            return s->cs[cs].rfr_ctrl;
+        case 0x28: /* SDRC_MANUAL_x */
+            return s->cs[cs].manual;
+        default:
+            break;
+        }
+        addr += cs * 0x30; /* restore address to get correct error messages */
+        break;
+
+    default:
+        break;
     }
 
     OMAP_BAD_REG(addr);
@@ -90,60 +161,125 @@ static void omap_sdrc_write(void *opaque, hwaddr addr,
                             uint64_t value, unsigned size)
 {
     struct omap_sdrc_s *s = (struct omap_sdrc_s *) opaque;
+    int cs = 0;
 
     if (size != 4) {
         return omap_badwidth_write32(opaque, addr, value);
     }
 
     switch (addr) {
-    case 0x00:	/* SDRC_REVISION */
-    case 0x14:	/* SDRC_SYSSTATUS */
-    case 0x48:	/* SDRC_ERR_ADDR */
-    case 0x64:	/* SDRC_DLLA_STATUS */
-    case 0x6c:	/* SDRC_DLLB_STATUS */
+    case 0x00: /* SDRC_REVISION */
+    case 0x14: /* SDRC_SYSSTATUS */
+    case 0x48: /* SDRC_ERR_ADDR */
+    case 0x64: /* SDRC_DLLA_STATUS */
+    case 0x6c: /* SDRC_DLLB_STATUS */
         OMAP_RO_REG(addr);
-        return;
+        break;
 
-    case 0x10:	/* SDRC_SYSCONFIG */
-        if ((value >> 3) != 0x2)
-            fprintf(stderr, "%s: bad SDRAM idle mode %i\n",
-                    __FUNCTION__, (unsigned)value >> 3);
-        if (value & 2)
+    case 0x10: /* SDRC_SYSCONFIG */
+        if (value & 2) {
             omap_sdrc_reset(s);
+        }
         s->config = value & 0x18;
         break;
 
-    case 0x40:	/* SDRC_CS_CFG */
-    case 0x44:	/* SDRC_SHARING */
-    case 0x4c:	/* SDRC_ERR_TYPE */
-    case 0x60:	/* SDRC_DLLA_SCTRL */
-    case 0x68:	/* SDRC_DLLB_CTRL */
-    case 0x70:	/* SDRC_POWER */
-    case 0x80:	/* SDRC_MCFG_0 */
-    case 0x84:	/* SDRC_MR_0 */
-    case 0x88:	/* SDRC_EMR1_0 */
-    case 0x8c:	/* SDRC_EMR2_0 */
-    case 0x90:	/* SDRC_EMR3_0 */
-    case 0x94:	/* SDRC_DCDL1_CTRL */
-    case 0x98:	/* SDRC_DCDL2_CTRL */
-    case 0x9c:	/* SDRC_ACTIM_CTRLA_0 */
-    case 0xa0:	/* SDRC_ACTIM_CTRLB_0 */
-    case 0xa4:	/* SDRC_RFR_CTRL_0 */
-    case 0xa8:	/* SDRC_MANUAL_0 */
-    case 0xb0:	/* SDRC_MCFG_1 */
-    case 0xb4:	/* SDRC_MR_1 */
-    case 0xb8:	/* SDRC_EMR1_1 */
-    case 0xbc:	/* SDRC_EMR2_1 */
-    case 0xc0:	/* SDRC_EMR3_1 */
-    case 0xc4:	/* SDRC_ACTIM_CTRLA_1 */
-    case 0xc8:	/* SDRC_ACTIM_CTRLB_1 */
-    case 0xd4:	/* SDRC_RFR_CTRL_1 */
-    case 0xd8:	/* SDRC_MANUAL_1 */
+    case 0x40: /* SDRC_CS_CFG */
+        s->cscfg = value & 0x30f;
+        break;
+
+    case 0x44: /* SDRC_SHARING */
+        if (!(s->sharing & 0x40000000)) { /* LOCK */
+            s->sharing = value & 0x40007f00;
+        }
+        break;
+
+    case 0x4c: /* SDRC_ERR_TYPE */
+        OMAP_BAD_REG(addr);
+        break;
+
+    case 0x60: /* SDRC_DLLA_CTRL */
+        s->dlla_ctrl = value & 0xffff00fe;
+        break;
+
+    case 0x68: /* SDRC_DLLB_CTRL */
+        /* silently ignore */
+        /*OMAP_BAD_REG(addr);*/
+        break;
+
+    case 0x70: /* SDRC_POWER_REG */
+        s->power_reg = value & 0x04fffffd;
+        break;
+
+    case 0xb0 ... 0xd8:
+        cs = 1;
+        addr -= 0x30;
+        /* fall through */
+    case 0x80 ... 0xa8:
+        switch (addr & 0x3f) {
+        case 0x00: /* SDRC_MCFG_x */
+            if (!(s->cs[cs].mcfg & 0x40000000)) { /* LOCKSTATUS */
+                if (value & 0x00080000) { /* ADDRMUXLEGACY */
+                    s->cs[cs].mcfg = value & 0x477bffdf;
+                } else {
+                    s->cs[cs].mcfg = value & 0x41fbffdf; /* TODO: marked ???? */
+                }
+            }
+            break;
+        case 0x04: /* SDRC_MR_x */
+            s->cs[cs].mr = value & 0xfff;
+            break;
+        case 0x08: /* SDRC_EMR1_x */
+            break;
+        case 0x0c: /* SDRC_EMR2_x */
+            s->cs[cs].emr2 = value & 0xfff;
+            break;
+        case 0x10: /* SDRC_EMR3_x */
+            break;
+        case 0x14:
+            if (cs) {
+                /* SDRC_ACTIM_CTRLA_1 */
+                s->cs[1].actim_ctrla = value & 0xffffffdf;
+            }
+            /* otherwise SDRC_DCDL1_CTRL, do nothing */
+            break;
+        case 0x18:
+            if (cs) {
+                /* SDRC_ACTIM_CTRLB_1 */
+                s->cs[1].actim_ctrlb = value & 0x000377ff;
+            }
+            /* otherwise SDRC_DCDL2_CTRL, do nothing */
+            break;
+        case 0x1c:
+            if (!cs) {
+                /* SDRC_ACTIM_CTRLA_0 */
+                s->cs[0].actim_ctrla = value & 0xffffffdf;
+            } else {
+                OMAP_BAD_REG(addr + 0x30);
+            }
+            break;
+        case 0x20:
+            if (!cs) {
+                /* SDRC_ACTIM_CTRLB_0 */
+                s->cs[0].actim_ctrlb = value & 0x000377ff;
+            } else {
+                OMAP_BAD_REG(addr + 0x30);
+            }
+            break;
+        case 0x24: /* SDRC_RFR_CTRL_x */
+            s->cs[cs].rfr_ctrl = value & 0x00ffff03;
+            break;
+        case 0x28: /* SDRC_MANUAL_x */
+            s->cs[cs].manual = value & 0xffff000f;
+            break;
+        default:
+            OMAP_BAD_REG(addr + cs * 0x30);
+            break;
+        }
         break;
 
     default:
         OMAP_BAD_REG(addr);
-        return;
+        break;
     }
 }
 
-- 
1.8.5.2

